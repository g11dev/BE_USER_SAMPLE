
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model FutureEvent
 * 
 */
export type FutureEvent = $Result.DefaultSelection<Prisma.$FutureEventPayload>
/**
 * Model Location
 * 
 */
export type Location = $Result.DefaultSelection<Prisma.$LocationPayload>
/**
 * Model PastEvent
 * 
 */
export type PastEvent = $Result.DefaultSelection<Prisma.$PastEventPayload>
/**
 * Model Question
 * 
 */
export type Question = $Result.DefaultSelection<Prisma.$QuestionPayload>
/**
 * Model Category
 * 
 */
export type Category = $Result.DefaultSelection<Prisma.$CategoryPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Role: {
  ADMIN: 'ADMIN',
  USER: 'USER'
};

export type Role = (typeof Role)[keyof typeof Role]

}

export type Role = $Enums.Role

export const Role: typeof $Enums.Role

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.futureEvent`: Exposes CRUD operations for the **FutureEvent** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FutureEvents
    * const futureEvents = await prisma.futureEvent.findMany()
    * ```
    */
  get futureEvent(): Prisma.FutureEventDelegate<ExtArgs>;

  /**
   * `prisma.location`: Exposes CRUD operations for the **Location** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Locations
    * const locations = await prisma.location.findMany()
    * ```
    */
  get location(): Prisma.LocationDelegate<ExtArgs>;

  /**
   * `prisma.pastEvent`: Exposes CRUD operations for the **PastEvent** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PastEvents
    * const pastEvents = await prisma.pastEvent.findMany()
    * ```
    */
  get pastEvent(): Prisma.PastEventDelegate<ExtArgs>;

  /**
   * `prisma.question`: Exposes CRUD operations for the **Question** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Questions
    * const questions = await prisma.question.findMany()
    * ```
    */
  get question(): Prisma.QuestionDelegate<ExtArgs>;

  /**
   * `prisma.category`: Exposes CRUD operations for the **Category** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categories
    * const categories = await prisma.category.findMany()
    * ```
    */
  get category(): Prisma.CategoryDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.21.1
   * Query Engine version: bf0e5e8a04cada8225617067eaa03d041e2bba36
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    FutureEvent: 'FutureEvent',
    Location: 'Location',
    PastEvent: 'PastEvent',
    Question: 'Question',
    Category: 'Category'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "futureEvent" | "location" | "pastEvent" | "question" | "category"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      FutureEvent: {
        payload: Prisma.$FutureEventPayload<ExtArgs>
        fields: Prisma.FutureEventFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FutureEventFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FutureEventPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FutureEventFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FutureEventPayload>
          }
          findFirst: {
            args: Prisma.FutureEventFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FutureEventPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FutureEventFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FutureEventPayload>
          }
          findMany: {
            args: Prisma.FutureEventFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FutureEventPayload>[]
          }
          create: {
            args: Prisma.FutureEventCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FutureEventPayload>
          }
          createMany: {
            args: Prisma.FutureEventCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FutureEventCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FutureEventPayload>[]
          }
          delete: {
            args: Prisma.FutureEventDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FutureEventPayload>
          }
          update: {
            args: Prisma.FutureEventUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FutureEventPayload>
          }
          deleteMany: {
            args: Prisma.FutureEventDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FutureEventUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.FutureEventUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FutureEventPayload>
          }
          aggregate: {
            args: Prisma.FutureEventAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFutureEvent>
          }
          groupBy: {
            args: Prisma.FutureEventGroupByArgs<ExtArgs>
            result: $Utils.Optional<FutureEventGroupByOutputType>[]
          }
          count: {
            args: Prisma.FutureEventCountArgs<ExtArgs>
            result: $Utils.Optional<FutureEventCountAggregateOutputType> | number
          }
        }
      }
      Location: {
        payload: Prisma.$LocationPayload<ExtArgs>
        fields: Prisma.LocationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LocationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LocationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          findFirst: {
            args: Prisma.LocationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LocationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          findMany: {
            args: Prisma.LocationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>[]
          }
          create: {
            args: Prisma.LocationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          createMany: {
            args: Prisma.LocationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LocationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>[]
          }
          delete: {
            args: Prisma.LocationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          update: {
            args: Prisma.LocationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          deleteMany: {
            args: Prisma.LocationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LocationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.LocationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LocationPayload>
          }
          aggregate: {
            args: Prisma.LocationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLocation>
          }
          groupBy: {
            args: Prisma.LocationGroupByArgs<ExtArgs>
            result: $Utils.Optional<LocationGroupByOutputType>[]
          }
          count: {
            args: Prisma.LocationCountArgs<ExtArgs>
            result: $Utils.Optional<LocationCountAggregateOutputType> | number
          }
        }
      }
      PastEvent: {
        payload: Prisma.$PastEventPayload<ExtArgs>
        fields: Prisma.PastEventFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PastEventFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PastEventPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PastEventFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PastEventPayload>
          }
          findFirst: {
            args: Prisma.PastEventFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PastEventPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PastEventFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PastEventPayload>
          }
          findMany: {
            args: Prisma.PastEventFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PastEventPayload>[]
          }
          create: {
            args: Prisma.PastEventCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PastEventPayload>
          }
          createMany: {
            args: Prisma.PastEventCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PastEventCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PastEventPayload>[]
          }
          delete: {
            args: Prisma.PastEventDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PastEventPayload>
          }
          update: {
            args: Prisma.PastEventUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PastEventPayload>
          }
          deleteMany: {
            args: Prisma.PastEventDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PastEventUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PastEventUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PastEventPayload>
          }
          aggregate: {
            args: Prisma.PastEventAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePastEvent>
          }
          groupBy: {
            args: Prisma.PastEventGroupByArgs<ExtArgs>
            result: $Utils.Optional<PastEventGroupByOutputType>[]
          }
          count: {
            args: Prisma.PastEventCountArgs<ExtArgs>
            result: $Utils.Optional<PastEventCountAggregateOutputType> | number
          }
        }
      }
      Question: {
        payload: Prisma.$QuestionPayload<ExtArgs>
        fields: Prisma.QuestionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.QuestionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.QuestionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>
          }
          findFirst: {
            args: Prisma.QuestionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.QuestionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>
          }
          findMany: {
            args: Prisma.QuestionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>[]
          }
          create: {
            args: Prisma.QuestionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>
          }
          createMany: {
            args: Prisma.QuestionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.QuestionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>[]
          }
          delete: {
            args: Prisma.QuestionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>
          }
          update: {
            args: Prisma.QuestionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>
          }
          deleteMany: {
            args: Prisma.QuestionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.QuestionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.QuestionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QuestionPayload>
          }
          aggregate: {
            args: Prisma.QuestionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateQuestion>
          }
          groupBy: {
            args: Prisma.QuestionGroupByArgs<ExtArgs>
            result: $Utils.Optional<QuestionGroupByOutputType>[]
          }
          count: {
            args: Prisma.QuestionCountArgs<ExtArgs>
            result: $Utils.Optional<QuestionCountAggregateOutputType> | number
          }
        }
      }
      Category: {
        payload: Prisma.$CategoryPayload<ExtArgs>
        fields: Prisma.CategoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CategoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CategoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          findFirst: {
            args: Prisma.CategoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CategoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          findMany: {
            args: Prisma.CategoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>[]
          }
          create: {
            args: Prisma.CategoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          createMany: {
            args: Prisma.CategoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CategoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>[]
          }
          delete: {
            args: Prisma.CategoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          update: {
            args: Prisma.CategoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          deleteMany: {
            args: Prisma.CategoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CategoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CategoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          aggregate: {
            args: Prisma.CategoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCategory>
          }
          groupBy: {
            args: Prisma.CategoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<CategoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.CategoryCountArgs<ExtArgs>
            result: $Utils.Optional<CategoryCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    futureEvents: number
    pastEvents: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    futureEvents?: boolean | UserCountOutputTypeCountFutureEventsArgs
    pastEvents?: boolean | UserCountOutputTypeCountPastEventsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFutureEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FutureEventWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPastEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PastEventWhereInput
  }


  /**
   * Count Type FutureEventCountOutputType
   */

  export type FutureEventCountOutputType = {
    categories: number
    users: number
    questions: number
  }

  export type FutureEventCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    categories?: boolean | FutureEventCountOutputTypeCountCategoriesArgs
    users?: boolean | FutureEventCountOutputTypeCountUsersArgs
    questions?: boolean | FutureEventCountOutputTypeCountQuestionsArgs
  }

  // Custom InputTypes
  /**
   * FutureEventCountOutputType without action
   */
  export type FutureEventCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FutureEventCountOutputType
     */
    select?: FutureEventCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * FutureEventCountOutputType without action
   */
  export type FutureEventCountOutputTypeCountCategoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoryWhereInput
  }

  /**
   * FutureEventCountOutputType without action
   */
  export type FutureEventCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * FutureEventCountOutputType without action
   */
  export type FutureEventCountOutputTypeCountQuestionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionWhereInput
  }


  /**
   * Count Type LocationCountOutputType
   */

  export type LocationCountOutputType = {
    pastEvents: number
    futureEvents: number
  }

  export type LocationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    pastEvents?: boolean | LocationCountOutputTypeCountPastEventsArgs
    futureEvents?: boolean | LocationCountOutputTypeCountFutureEventsArgs
  }

  // Custom InputTypes
  /**
   * LocationCountOutputType without action
   */
  export type LocationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LocationCountOutputType
     */
    select?: LocationCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * LocationCountOutputType without action
   */
  export type LocationCountOutputTypeCountPastEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PastEventWhereInput
  }

  /**
   * LocationCountOutputType without action
   */
  export type LocationCountOutputTypeCountFutureEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FutureEventWhereInput
  }


  /**
   * Count Type PastEventCountOutputType
   */

  export type PastEventCountOutputType = {
    categories: number
    users: number
  }

  export type PastEventCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    categories?: boolean | PastEventCountOutputTypeCountCategoriesArgs
    users?: boolean | PastEventCountOutputTypeCountUsersArgs
  }

  // Custom InputTypes
  /**
   * PastEventCountOutputType without action
   */
  export type PastEventCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PastEventCountOutputType
     */
    select?: PastEventCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PastEventCountOutputType without action
   */
  export type PastEventCountOutputTypeCountCategoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoryWhereInput
  }

  /**
   * PastEventCountOutputType without action
   */
  export type PastEventCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }


  /**
   * Count Type QuestionCountOutputType
   */

  export type QuestionCountOutputType = {
    futureEvents: number
  }

  export type QuestionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    futureEvents?: boolean | QuestionCountOutputTypeCountFutureEventsArgs
  }

  // Custom InputTypes
  /**
   * QuestionCountOutputType without action
   */
  export type QuestionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QuestionCountOutputType
     */
    select?: QuestionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * QuestionCountOutputType without action
   */
  export type QuestionCountOutputTypeCountFutureEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FutureEventWhereInput
  }


  /**
   * Count Type CategoryCountOutputType
   */

  export type CategoryCountOutputType = {
    question: number
    futureEvents: number
    pastEvents: number
  }

  export type CategoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    question?: boolean | CategoryCountOutputTypeCountQuestionArgs
    futureEvents?: boolean | CategoryCountOutputTypeCountFutureEventsArgs
    pastEvents?: boolean | CategoryCountOutputTypeCountPastEventsArgs
  }

  // Custom InputTypes
  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryCountOutputType
     */
    select?: CategoryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeCountQuestionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionWhereInput
  }

  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeCountFutureEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FutureEventWhereInput
  }

  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeCountPastEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PastEventWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    role: $Enums.Role | null
    username: string | null
    createdAt: Date | null
    email: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    role: $Enums.Role | null
    username: string | null
    createdAt: Date | null
    email: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    role: number
    username: number
    createdAt: number
    email: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    role?: true
    username?: true
    createdAt?: true
    email?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    role?: true
    username?: true
    createdAt?: true
    email?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    role?: true
    username?: true
    createdAt?: true
    email?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    role: $Enums.Role
    username: string
    createdAt: Date
    email: string
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    role?: boolean
    username?: boolean
    createdAt?: boolean
    email?: boolean
    futureEvents?: boolean | User$futureEventsArgs<ExtArgs>
    pastEvents?: boolean | User$pastEventsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    role?: boolean
    username?: boolean
    createdAt?: boolean
    email?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    role?: boolean
    username?: boolean
    createdAt?: boolean
    email?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    futureEvents?: boolean | User$futureEventsArgs<ExtArgs>
    pastEvents?: boolean | User$pastEventsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      futureEvents: Prisma.$FutureEventPayload<ExtArgs>[]
      pastEvents: Prisma.$PastEventPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      role: $Enums.Role
      username: string
      createdAt: Date
      email: string
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    futureEvents<T extends User$futureEventsArgs<ExtArgs> = {}>(args?: Subset<T, User$futureEventsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FutureEventPayload<ExtArgs>, T, "findMany"> | Null>
    pastEvents<T extends User$pastEventsArgs<ExtArgs> = {}>(args?: Subset<T, User$pastEventsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PastEventPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly role: FieldRef<"User", 'Role'>
    readonly username: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly email: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.futureEvents
   */
  export type User$futureEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FutureEvent
     */
    select?: FutureEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FutureEventInclude<ExtArgs> | null
    where?: FutureEventWhereInput
    orderBy?: FutureEventOrderByWithRelationInput | FutureEventOrderByWithRelationInput[]
    cursor?: FutureEventWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FutureEventScalarFieldEnum | FutureEventScalarFieldEnum[]
  }

  /**
   * User.pastEvents
   */
  export type User$pastEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PastEvent
     */
    select?: PastEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PastEventInclude<ExtArgs> | null
    where?: PastEventWhereInput
    orderBy?: PastEventOrderByWithRelationInput | PastEventOrderByWithRelationInput[]
    cursor?: PastEventWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PastEventScalarFieldEnum | PastEventScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model FutureEvent
   */

  export type AggregateFutureEvent = {
    _count: FutureEventCountAggregateOutputType | null
    _avg: FutureEventAvgAggregateOutputType | null
    _sum: FutureEventSumAggregateOutputType | null
    _min: FutureEventMinAggregateOutputType | null
    _max: FutureEventMaxAggregateOutputType | null
  }

  export type FutureEventAvgAggregateOutputType = {
    id: number | null
    locationId: number | null
  }

  export type FutureEventSumAggregateOutputType = {
    id: number | null
    locationId: number | null
  }

  export type FutureEventMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    title: string | null
    image: string | null
    date: Date | null
    published: boolean | null
    locationId: number | null
  }

  export type FutureEventMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    title: string | null
    image: string | null
    date: Date | null
    published: boolean | null
    locationId: number | null
  }

  export type FutureEventCountAggregateOutputType = {
    id: number
    createdAt: number
    title: number
    image: number
    date: number
    published: number
    locationId: number
    _all: number
  }


  export type FutureEventAvgAggregateInputType = {
    id?: true
    locationId?: true
  }

  export type FutureEventSumAggregateInputType = {
    id?: true
    locationId?: true
  }

  export type FutureEventMinAggregateInputType = {
    id?: true
    createdAt?: true
    title?: true
    image?: true
    date?: true
    published?: true
    locationId?: true
  }

  export type FutureEventMaxAggregateInputType = {
    id?: true
    createdAt?: true
    title?: true
    image?: true
    date?: true
    published?: true
    locationId?: true
  }

  export type FutureEventCountAggregateInputType = {
    id?: true
    createdAt?: true
    title?: true
    image?: true
    date?: true
    published?: true
    locationId?: true
    _all?: true
  }

  export type FutureEventAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FutureEvent to aggregate.
     */
    where?: FutureEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FutureEvents to fetch.
     */
    orderBy?: FutureEventOrderByWithRelationInput | FutureEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FutureEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FutureEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FutureEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FutureEvents
    **/
    _count?: true | FutureEventCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FutureEventAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FutureEventSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FutureEventMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FutureEventMaxAggregateInputType
  }

  export type GetFutureEventAggregateType<T extends FutureEventAggregateArgs> = {
        [P in keyof T & keyof AggregateFutureEvent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFutureEvent[P]>
      : GetScalarType<T[P], AggregateFutureEvent[P]>
  }




  export type FutureEventGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FutureEventWhereInput
    orderBy?: FutureEventOrderByWithAggregationInput | FutureEventOrderByWithAggregationInput[]
    by: FutureEventScalarFieldEnum[] | FutureEventScalarFieldEnum
    having?: FutureEventScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FutureEventCountAggregateInputType | true
    _avg?: FutureEventAvgAggregateInputType
    _sum?: FutureEventSumAggregateInputType
    _min?: FutureEventMinAggregateInputType
    _max?: FutureEventMaxAggregateInputType
  }

  export type FutureEventGroupByOutputType = {
    id: number
    createdAt: Date
    title: string
    image: string
    date: Date
    published: boolean
    locationId: number
    _count: FutureEventCountAggregateOutputType | null
    _avg: FutureEventAvgAggregateOutputType | null
    _sum: FutureEventSumAggregateOutputType | null
    _min: FutureEventMinAggregateOutputType | null
    _max: FutureEventMaxAggregateOutputType | null
  }

  type GetFutureEventGroupByPayload<T extends FutureEventGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FutureEventGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FutureEventGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FutureEventGroupByOutputType[P]>
            : GetScalarType<T[P], FutureEventGroupByOutputType[P]>
        }
      >
    >


  export type FutureEventSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    title?: boolean
    image?: boolean
    date?: boolean
    published?: boolean
    locationId?: boolean
    location?: boolean | LocationDefaultArgs<ExtArgs>
    categories?: boolean | FutureEvent$categoriesArgs<ExtArgs>
    users?: boolean | FutureEvent$usersArgs<ExtArgs>
    questions?: boolean | FutureEvent$questionsArgs<ExtArgs>
    _count?: boolean | FutureEventCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["futureEvent"]>

  export type FutureEventSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    title?: boolean
    image?: boolean
    date?: boolean
    published?: boolean
    locationId?: boolean
    location?: boolean | LocationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["futureEvent"]>

  export type FutureEventSelectScalar = {
    id?: boolean
    createdAt?: boolean
    title?: boolean
    image?: boolean
    date?: boolean
    published?: boolean
    locationId?: boolean
  }

  export type FutureEventInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    location?: boolean | LocationDefaultArgs<ExtArgs>
    categories?: boolean | FutureEvent$categoriesArgs<ExtArgs>
    users?: boolean | FutureEvent$usersArgs<ExtArgs>
    questions?: boolean | FutureEvent$questionsArgs<ExtArgs>
    _count?: boolean | FutureEventCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type FutureEventIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    location?: boolean | LocationDefaultArgs<ExtArgs>
  }

  export type $FutureEventPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FutureEvent"
    objects: {
      location: Prisma.$LocationPayload<ExtArgs>
      categories: Prisma.$CategoryPayload<ExtArgs>[]
      users: Prisma.$UserPayload<ExtArgs>[]
      questions: Prisma.$QuestionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      createdAt: Date
      title: string
      image: string
      date: Date
      published: boolean
      locationId: number
    }, ExtArgs["result"]["futureEvent"]>
    composites: {}
  }

  type FutureEventGetPayload<S extends boolean | null | undefined | FutureEventDefaultArgs> = $Result.GetResult<Prisma.$FutureEventPayload, S>

  type FutureEventCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FutureEventFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FutureEventCountAggregateInputType | true
    }

  export interface FutureEventDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FutureEvent'], meta: { name: 'FutureEvent' } }
    /**
     * Find zero or one FutureEvent that matches the filter.
     * @param {FutureEventFindUniqueArgs} args - Arguments to find a FutureEvent
     * @example
     * // Get one FutureEvent
     * const futureEvent = await prisma.futureEvent.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FutureEventFindUniqueArgs>(args: SelectSubset<T, FutureEventFindUniqueArgs<ExtArgs>>): Prisma__FutureEventClient<$Result.GetResult<Prisma.$FutureEventPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one FutureEvent that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {FutureEventFindUniqueOrThrowArgs} args - Arguments to find a FutureEvent
     * @example
     * // Get one FutureEvent
     * const futureEvent = await prisma.futureEvent.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FutureEventFindUniqueOrThrowArgs>(args: SelectSubset<T, FutureEventFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FutureEventClient<$Result.GetResult<Prisma.$FutureEventPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first FutureEvent that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FutureEventFindFirstArgs} args - Arguments to find a FutureEvent
     * @example
     * // Get one FutureEvent
     * const futureEvent = await prisma.futureEvent.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FutureEventFindFirstArgs>(args?: SelectSubset<T, FutureEventFindFirstArgs<ExtArgs>>): Prisma__FutureEventClient<$Result.GetResult<Prisma.$FutureEventPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first FutureEvent that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FutureEventFindFirstOrThrowArgs} args - Arguments to find a FutureEvent
     * @example
     * // Get one FutureEvent
     * const futureEvent = await prisma.futureEvent.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FutureEventFindFirstOrThrowArgs>(args?: SelectSubset<T, FutureEventFindFirstOrThrowArgs<ExtArgs>>): Prisma__FutureEventClient<$Result.GetResult<Prisma.$FutureEventPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more FutureEvents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FutureEventFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FutureEvents
     * const futureEvents = await prisma.futureEvent.findMany()
     * 
     * // Get first 10 FutureEvents
     * const futureEvents = await prisma.futureEvent.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const futureEventWithIdOnly = await prisma.futureEvent.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FutureEventFindManyArgs>(args?: SelectSubset<T, FutureEventFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FutureEventPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a FutureEvent.
     * @param {FutureEventCreateArgs} args - Arguments to create a FutureEvent.
     * @example
     * // Create one FutureEvent
     * const FutureEvent = await prisma.futureEvent.create({
     *   data: {
     *     // ... data to create a FutureEvent
     *   }
     * })
     * 
     */
    create<T extends FutureEventCreateArgs>(args: SelectSubset<T, FutureEventCreateArgs<ExtArgs>>): Prisma__FutureEventClient<$Result.GetResult<Prisma.$FutureEventPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many FutureEvents.
     * @param {FutureEventCreateManyArgs} args - Arguments to create many FutureEvents.
     * @example
     * // Create many FutureEvents
     * const futureEvent = await prisma.futureEvent.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FutureEventCreateManyArgs>(args?: SelectSubset<T, FutureEventCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FutureEvents and returns the data saved in the database.
     * @param {FutureEventCreateManyAndReturnArgs} args - Arguments to create many FutureEvents.
     * @example
     * // Create many FutureEvents
     * const futureEvent = await prisma.futureEvent.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FutureEvents and only return the `id`
     * const futureEventWithIdOnly = await prisma.futureEvent.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FutureEventCreateManyAndReturnArgs>(args?: SelectSubset<T, FutureEventCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FutureEventPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a FutureEvent.
     * @param {FutureEventDeleteArgs} args - Arguments to delete one FutureEvent.
     * @example
     * // Delete one FutureEvent
     * const FutureEvent = await prisma.futureEvent.delete({
     *   where: {
     *     // ... filter to delete one FutureEvent
     *   }
     * })
     * 
     */
    delete<T extends FutureEventDeleteArgs>(args: SelectSubset<T, FutureEventDeleteArgs<ExtArgs>>): Prisma__FutureEventClient<$Result.GetResult<Prisma.$FutureEventPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one FutureEvent.
     * @param {FutureEventUpdateArgs} args - Arguments to update one FutureEvent.
     * @example
     * // Update one FutureEvent
     * const futureEvent = await prisma.futureEvent.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FutureEventUpdateArgs>(args: SelectSubset<T, FutureEventUpdateArgs<ExtArgs>>): Prisma__FutureEventClient<$Result.GetResult<Prisma.$FutureEventPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more FutureEvents.
     * @param {FutureEventDeleteManyArgs} args - Arguments to filter FutureEvents to delete.
     * @example
     * // Delete a few FutureEvents
     * const { count } = await prisma.futureEvent.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FutureEventDeleteManyArgs>(args?: SelectSubset<T, FutureEventDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FutureEvents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FutureEventUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FutureEvents
     * const futureEvent = await prisma.futureEvent.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FutureEventUpdateManyArgs>(args: SelectSubset<T, FutureEventUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one FutureEvent.
     * @param {FutureEventUpsertArgs} args - Arguments to update or create a FutureEvent.
     * @example
     * // Update or create a FutureEvent
     * const futureEvent = await prisma.futureEvent.upsert({
     *   create: {
     *     // ... data to create a FutureEvent
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FutureEvent we want to update
     *   }
     * })
     */
    upsert<T extends FutureEventUpsertArgs>(args: SelectSubset<T, FutureEventUpsertArgs<ExtArgs>>): Prisma__FutureEventClient<$Result.GetResult<Prisma.$FutureEventPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of FutureEvents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FutureEventCountArgs} args - Arguments to filter FutureEvents to count.
     * @example
     * // Count the number of FutureEvents
     * const count = await prisma.futureEvent.count({
     *   where: {
     *     // ... the filter for the FutureEvents we want to count
     *   }
     * })
    **/
    count<T extends FutureEventCountArgs>(
      args?: Subset<T, FutureEventCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FutureEventCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FutureEvent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FutureEventAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FutureEventAggregateArgs>(args: Subset<T, FutureEventAggregateArgs>): Prisma.PrismaPromise<GetFutureEventAggregateType<T>>

    /**
     * Group by FutureEvent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FutureEventGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FutureEventGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FutureEventGroupByArgs['orderBy'] }
        : { orderBy?: FutureEventGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FutureEventGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFutureEventGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FutureEvent model
   */
  readonly fields: FutureEventFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FutureEvent.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FutureEventClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    location<T extends LocationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LocationDefaultArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    categories<T extends FutureEvent$categoriesArgs<ExtArgs> = {}>(args?: Subset<T, FutureEvent$categoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findMany"> | Null>
    users<T extends FutureEvent$usersArgs<ExtArgs> = {}>(args?: Subset<T, FutureEvent$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany"> | Null>
    questions<T extends FutureEvent$questionsArgs<ExtArgs> = {}>(args?: Subset<T, FutureEvent$questionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FutureEvent model
   */ 
  interface FutureEventFieldRefs {
    readonly id: FieldRef<"FutureEvent", 'Int'>
    readonly createdAt: FieldRef<"FutureEvent", 'DateTime'>
    readonly title: FieldRef<"FutureEvent", 'String'>
    readonly image: FieldRef<"FutureEvent", 'String'>
    readonly date: FieldRef<"FutureEvent", 'DateTime'>
    readonly published: FieldRef<"FutureEvent", 'Boolean'>
    readonly locationId: FieldRef<"FutureEvent", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * FutureEvent findUnique
   */
  export type FutureEventFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FutureEvent
     */
    select?: FutureEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FutureEventInclude<ExtArgs> | null
    /**
     * Filter, which FutureEvent to fetch.
     */
    where: FutureEventWhereUniqueInput
  }

  /**
   * FutureEvent findUniqueOrThrow
   */
  export type FutureEventFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FutureEvent
     */
    select?: FutureEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FutureEventInclude<ExtArgs> | null
    /**
     * Filter, which FutureEvent to fetch.
     */
    where: FutureEventWhereUniqueInput
  }

  /**
   * FutureEvent findFirst
   */
  export type FutureEventFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FutureEvent
     */
    select?: FutureEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FutureEventInclude<ExtArgs> | null
    /**
     * Filter, which FutureEvent to fetch.
     */
    where?: FutureEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FutureEvents to fetch.
     */
    orderBy?: FutureEventOrderByWithRelationInput | FutureEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FutureEvents.
     */
    cursor?: FutureEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FutureEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FutureEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FutureEvents.
     */
    distinct?: FutureEventScalarFieldEnum | FutureEventScalarFieldEnum[]
  }

  /**
   * FutureEvent findFirstOrThrow
   */
  export type FutureEventFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FutureEvent
     */
    select?: FutureEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FutureEventInclude<ExtArgs> | null
    /**
     * Filter, which FutureEvent to fetch.
     */
    where?: FutureEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FutureEvents to fetch.
     */
    orderBy?: FutureEventOrderByWithRelationInput | FutureEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FutureEvents.
     */
    cursor?: FutureEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FutureEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FutureEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FutureEvents.
     */
    distinct?: FutureEventScalarFieldEnum | FutureEventScalarFieldEnum[]
  }

  /**
   * FutureEvent findMany
   */
  export type FutureEventFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FutureEvent
     */
    select?: FutureEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FutureEventInclude<ExtArgs> | null
    /**
     * Filter, which FutureEvents to fetch.
     */
    where?: FutureEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FutureEvents to fetch.
     */
    orderBy?: FutureEventOrderByWithRelationInput | FutureEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FutureEvents.
     */
    cursor?: FutureEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FutureEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FutureEvents.
     */
    skip?: number
    distinct?: FutureEventScalarFieldEnum | FutureEventScalarFieldEnum[]
  }

  /**
   * FutureEvent create
   */
  export type FutureEventCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FutureEvent
     */
    select?: FutureEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FutureEventInclude<ExtArgs> | null
    /**
     * The data needed to create a FutureEvent.
     */
    data: XOR<FutureEventCreateInput, FutureEventUncheckedCreateInput>
  }

  /**
   * FutureEvent createMany
   */
  export type FutureEventCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FutureEvents.
     */
    data: FutureEventCreateManyInput | FutureEventCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FutureEvent createManyAndReturn
   */
  export type FutureEventCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FutureEvent
     */
    select?: FutureEventSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many FutureEvents.
     */
    data: FutureEventCreateManyInput | FutureEventCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FutureEventIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * FutureEvent update
   */
  export type FutureEventUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FutureEvent
     */
    select?: FutureEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FutureEventInclude<ExtArgs> | null
    /**
     * The data needed to update a FutureEvent.
     */
    data: XOR<FutureEventUpdateInput, FutureEventUncheckedUpdateInput>
    /**
     * Choose, which FutureEvent to update.
     */
    where: FutureEventWhereUniqueInput
  }

  /**
   * FutureEvent updateMany
   */
  export type FutureEventUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FutureEvents.
     */
    data: XOR<FutureEventUpdateManyMutationInput, FutureEventUncheckedUpdateManyInput>
    /**
     * Filter which FutureEvents to update
     */
    where?: FutureEventWhereInput
  }

  /**
   * FutureEvent upsert
   */
  export type FutureEventUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FutureEvent
     */
    select?: FutureEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FutureEventInclude<ExtArgs> | null
    /**
     * The filter to search for the FutureEvent to update in case it exists.
     */
    where: FutureEventWhereUniqueInput
    /**
     * In case the FutureEvent found by the `where` argument doesn't exist, create a new FutureEvent with this data.
     */
    create: XOR<FutureEventCreateInput, FutureEventUncheckedCreateInput>
    /**
     * In case the FutureEvent was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FutureEventUpdateInput, FutureEventUncheckedUpdateInput>
  }

  /**
   * FutureEvent delete
   */
  export type FutureEventDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FutureEvent
     */
    select?: FutureEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FutureEventInclude<ExtArgs> | null
    /**
     * Filter which FutureEvent to delete.
     */
    where: FutureEventWhereUniqueInput
  }

  /**
   * FutureEvent deleteMany
   */
  export type FutureEventDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FutureEvents to delete
     */
    where?: FutureEventWhereInput
  }

  /**
   * FutureEvent.categories
   */
  export type FutureEvent$categoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    where?: CategoryWhereInput
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    cursor?: CategoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * FutureEvent.users
   */
  export type FutureEvent$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * FutureEvent.questions
   */
  export type FutureEvent$questionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    where?: QuestionWhereInput
    orderBy?: QuestionOrderByWithRelationInput | QuestionOrderByWithRelationInput[]
    cursor?: QuestionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QuestionScalarFieldEnum | QuestionScalarFieldEnum[]
  }

  /**
   * FutureEvent without action
   */
  export type FutureEventDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FutureEvent
     */
    select?: FutureEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FutureEventInclude<ExtArgs> | null
  }


  /**
   * Model Location
   */

  export type AggregateLocation = {
    _count: LocationCountAggregateOutputType | null
    _avg: LocationAvgAggregateOutputType | null
    _sum: LocationSumAggregateOutputType | null
    _min: LocationMinAggregateOutputType | null
    _max: LocationMaxAggregateOutputType | null
  }

  export type LocationAvgAggregateOutputType = {
    id: number | null
  }

  export type LocationSumAggregateOutputType = {
    id: number | null
  }

  export type LocationMinAggregateOutputType = {
    id: number | null
    name: string | null
    address: string | null
    image: string | null
  }

  export type LocationMaxAggregateOutputType = {
    id: number | null
    name: string | null
    address: string | null
    image: string | null
  }

  export type LocationCountAggregateOutputType = {
    id: number
    name: number
    address: number
    image: number
    _all: number
  }


  export type LocationAvgAggregateInputType = {
    id?: true
  }

  export type LocationSumAggregateInputType = {
    id?: true
  }

  export type LocationMinAggregateInputType = {
    id?: true
    name?: true
    address?: true
    image?: true
  }

  export type LocationMaxAggregateInputType = {
    id?: true
    name?: true
    address?: true
    image?: true
  }

  export type LocationCountAggregateInputType = {
    id?: true
    name?: true
    address?: true
    image?: true
    _all?: true
  }

  export type LocationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Location to aggregate.
     */
    where?: LocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Locations to fetch.
     */
    orderBy?: LocationOrderByWithRelationInput | LocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Locations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Locations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Locations
    **/
    _count?: true | LocationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LocationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LocationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LocationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LocationMaxAggregateInputType
  }

  export type GetLocationAggregateType<T extends LocationAggregateArgs> = {
        [P in keyof T & keyof AggregateLocation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLocation[P]>
      : GetScalarType<T[P], AggregateLocation[P]>
  }




  export type LocationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LocationWhereInput
    orderBy?: LocationOrderByWithAggregationInput | LocationOrderByWithAggregationInput[]
    by: LocationScalarFieldEnum[] | LocationScalarFieldEnum
    having?: LocationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LocationCountAggregateInputType | true
    _avg?: LocationAvgAggregateInputType
    _sum?: LocationSumAggregateInputType
    _min?: LocationMinAggregateInputType
    _max?: LocationMaxAggregateInputType
  }

  export type LocationGroupByOutputType = {
    id: number
    name: string
    address: string
    image: string
    _count: LocationCountAggregateOutputType | null
    _avg: LocationAvgAggregateOutputType | null
    _sum: LocationSumAggregateOutputType | null
    _min: LocationMinAggregateOutputType | null
    _max: LocationMaxAggregateOutputType | null
  }

  type GetLocationGroupByPayload<T extends LocationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LocationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LocationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LocationGroupByOutputType[P]>
            : GetScalarType<T[P], LocationGroupByOutputType[P]>
        }
      >
    >


  export type LocationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    address?: boolean
    image?: boolean
    pastEvents?: boolean | Location$pastEventsArgs<ExtArgs>
    futureEvents?: boolean | Location$futureEventsArgs<ExtArgs>
    _count?: boolean | LocationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["location"]>

  export type LocationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    address?: boolean
    image?: boolean
  }, ExtArgs["result"]["location"]>

  export type LocationSelectScalar = {
    id?: boolean
    name?: boolean
    address?: boolean
    image?: boolean
  }

  export type LocationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    pastEvents?: boolean | Location$pastEventsArgs<ExtArgs>
    futureEvents?: boolean | Location$futureEventsArgs<ExtArgs>
    _count?: boolean | LocationCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type LocationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $LocationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Location"
    objects: {
      pastEvents: Prisma.$PastEventPayload<ExtArgs>[]
      futureEvents: Prisma.$FutureEventPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      address: string
      image: string
    }, ExtArgs["result"]["location"]>
    composites: {}
  }

  type LocationGetPayload<S extends boolean | null | undefined | LocationDefaultArgs> = $Result.GetResult<Prisma.$LocationPayload, S>

  type LocationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<LocationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: LocationCountAggregateInputType | true
    }

  export interface LocationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Location'], meta: { name: 'Location' } }
    /**
     * Find zero or one Location that matches the filter.
     * @param {LocationFindUniqueArgs} args - Arguments to find a Location
     * @example
     * // Get one Location
     * const location = await prisma.location.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LocationFindUniqueArgs>(args: SelectSubset<T, LocationFindUniqueArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Location that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {LocationFindUniqueOrThrowArgs} args - Arguments to find a Location
     * @example
     * // Get one Location
     * const location = await prisma.location.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LocationFindUniqueOrThrowArgs>(args: SelectSubset<T, LocationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Location that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationFindFirstArgs} args - Arguments to find a Location
     * @example
     * // Get one Location
     * const location = await prisma.location.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LocationFindFirstArgs>(args?: SelectSubset<T, LocationFindFirstArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Location that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationFindFirstOrThrowArgs} args - Arguments to find a Location
     * @example
     * // Get one Location
     * const location = await prisma.location.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LocationFindFirstOrThrowArgs>(args?: SelectSubset<T, LocationFindFirstOrThrowArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Locations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Locations
     * const locations = await prisma.location.findMany()
     * 
     * // Get first 10 Locations
     * const locations = await prisma.location.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const locationWithIdOnly = await prisma.location.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LocationFindManyArgs>(args?: SelectSubset<T, LocationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Location.
     * @param {LocationCreateArgs} args - Arguments to create a Location.
     * @example
     * // Create one Location
     * const Location = await prisma.location.create({
     *   data: {
     *     // ... data to create a Location
     *   }
     * })
     * 
     */
    create<T extends LocationCreateArgs>(args: SelectSubset<T, LocationCreateArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Locations.
     * @param {LocationCreateManyArgs} args - Arguments to create many Locations.
     * @example
     * // Create many Locations
     * const location = await prisma.location.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LocationCreateManyArgs>(args?: SelectSubset<T, LocationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Locations and returns the data saved in the database.
     * @param {LocationCreateManyAndReturnArgs} args - Arguments to create many Locations.
     * @example
     * // Create many Locations
     * const location = await prisma.location.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Locations and only return the `id`
     * const locationWithIdOnly = await prisma.location.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LocationCreateManyAndReturnArgs>(args?: SelectSubset<T, LocationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Location.
     * @param {LocationDeleteArgs} args - Arguments to delete one Location.
     * @example
     * // Delete one Location
     * const Location = await prisma.location.delete({
     *   where: {
     *     // ... filter to delete one Location
     *   }
     * })
     * 
     */
    delete<T extends LocationDeleteArgs>(args: SelectSubset<T, LocationDeleteArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Location.
     * @param {LocationUpdateArgs} args - Arguments to update one Location.
     * @example
     * // Update one Location
     * const location = await prisma.location.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LocationUpdateArgs>(args: SelectSubset<T, LocationUpdateArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Locations.
     * @param {LocationDeleteManyArgs} args - Arguments to filter Locations to delete.
     * @example
     * // Delete a few Locations
     * const { count } = await prisma.location.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LocationDeleteManyArgs>(args?: SelectSubset<T, LocationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Locations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Locations
     * const location = await prisma.location.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LocationUpdateManyArgs>(args: SelectSubset<T, LocationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Location.
     * @param {LocationUpsertArgs} args - Arguments to update or create a Location.
     * @example
     * // Update or create a Location
     * const location = await prisma.location.upsert({
     *   create: {
     *     // ... data to create a Location
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Location we want to update
     *   }
     * })
     */
    upsert<T extends LocationUpsertArgs>(args: SelectSubset<T, LocationUpsertArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Locations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationCountArgs} args - Arguments to filter Locations to count.
     * @example
     * // Count the number of Locations
     * const count = await prisma.location.count({
     *   where: {
     *     // ... the filter for the Locations we want to count
     *   }
     * })
    **/
    count<T extends LocationCountArgs>(
      args?: Subset<T, LocationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LocationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Location.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LocationAggregateArgs>(args: Subset<T, LocationAggregateArgs>): Prisma.PrismaPromise<GetLocationAggregateType<T>>

    /**
     * Group by Location.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LocationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LocationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LocationGroupByArgs['orderBy'] }
        : { orderBy?: LocationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LocationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLocationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Location model
   */
  readonly fields: LocationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Location.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LocationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    pastEvents<T extends Location$pastEventsArgs<ExtArgs> = {}>(args?: Subset<T, Location$pastEventsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PastEventPayload<ExtArgs>, T, "findMany"> | Null>
    futureEvents<T extends Location$futureEventsArgs<ExtArgs> = {}>(args?: Subset<T, Location$futureEventsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FutureEventPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Location model
   */ 
  interface LocationFieldRefs {
    readonly id: FieldRef<"Location", 'Int'>
    readonly name: FieldRef<"Location", 'String'>
    readonly address: FieldRef<"Location", 'String'>
    readonly image: FieldRef<"Location", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Location findUnique
   */
  export type LocationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter, which Location to fetch.
     */
    where: LocationWhereUniqueInput
  }

  /**
   * Location findUniqueOrThrow
   */
  export type LocationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter, which Location to fetch.
     */
    where: LocationWhereUniqueInput
  }

  /**
   * Location findFirst
   */
  export type LocationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter, which Location to fetch.
     */
    where?: LocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Locations to fetch.
     */
    orderBy?: LocationOrderByWithRelationInput | LocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Locations.
     */
    cursor?: LocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Locations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Locations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Locations.
     */
    distinct?: LocationScalarFieldEnum | LocationScalarFieldEnum[]
  }

  /**
   * Location findFirstOrThrow
   */
  export type LocationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter, which Location to fetch.
     */
    where?: LocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Locations to fetch.
     */
    orderBy?: LocationOrderByWithRelationInput | LocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Locations.
     */
    cursor?: LocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Locations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Locations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Locations.
     */
    distinct?: LocationScalarFieldEnum | LocationScalarFieldEnum[]
  }

  /**
   * Location findMany
   */
  export type LocationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter, which Locations to fetch.
     */
    where?: LocationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Locations to fetch.
     */
    orderBy?: LocationOrderByWithRelationInput | LocationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Locations.
     */
    cursor?: LocationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Locations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Locations.
     */
    skip?: number
    distinct?: LocationScalarFieldEnum | LocationScalarFieldEnum[]
  }

  /**
   * Location create
   */
  export type LocationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * The data needed to create a Location.
     */
    data: XOR<LocationCreateInput, LocationUncheckedCreateInput>
  }

  /**
   * Location createMany
   */
  export type LocationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Locations.
     */
    data: LocationCreateManyInput | LocationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Location createManyAndReturn
   */
  export type LocationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Locations.
     */
    data: LocationCreateManyInput | LocationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Location update
   */
  export type LocationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * The data needed to update a Location.
     */
    data: XOR<LocationUpdateInput, LocationUncheckedUpdateInput>
    /**
     * Choose, which Location to update.
     */
    where: LocationWhereUniqueInput
  }

  /**
   * Location updateMany
   */
  export type LocationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Locations.
     */
    data: XOR<LocationUpdateManyMutationInput, LocationUncheckedUpdateManyInput>
    /**
     * Filter which Locations to update
     */
    where?: LocationWhereInput
  }

  /**
   * Location upsert
   */
  export type LocationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * The filter to search for the Location to update in case it exists.
     */
    where: LocationWhereUniqueInput
    /**
     * In case the Location found by the `where` argument doesn't exist, create a new Location with this data.
     */
    create: XOR<LocationCreateInput, LocationUncheckedCreateInput>
    /**
     * In case the Location was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LocationUpdateInput, LocationUncheckedUpdateInput>
  }

  /**
   * Location delete
   */
  export type LocationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
    /**
     * Filter which Location to delete.
     */
    where: LocationWhereUniqueInput
  }

  /**
   * Location deleteMany
   */
  export type LocationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Locations to delete
     */
    where?: LocationWhereInput
  }

  /**
   * Location.pastEvents
   */
  export type Location$pastEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PastEvent
     */
    select?: PastEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PastEventInclude<ExtArgs> | null
    where?: PastEventWhereInput
    orderBy?: PastEventOrderByWithRelationInput | PastEventOrderByWithRelationInput[]
    cursor?: PastEventWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PastEventScalarFieldEnum | PastEventScalarFieldEnum[]
  }

  /**
   * Location.futureEvents
   */
  export type Location$futureEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FutureEvent
     */
    select?: FutureEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FutureEventInclude<ExtArgs> | null
    where?: FutureEventWhereInput
    orderBy?: FutureEventOrderByWithRelationInput | FutureEventOrderByWithRelationInput[]
    cursor?: FutureEventWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FutureEventScalarFieldEnum | FutureEventScalarFieldEnum[]
  }

  /**
   * Location without action
   */
  export type LocationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Location
     */
    select?: LocationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LocationInclude<ExtArgs> | null
  }


  /**
   * Model PastEvent
   */

  export type AggregatePastEvent = {
    _count: PastEventCountAggregateOutputType | null
    _avg: PastEventAvgAggregateOutputType | null
    _sum: PastEventSumAggregateOutputType | null
    _min: PastEventMinAggregateOutputType | null
    _max: PastEventMaxAggregateOutputType | null
  }

  export type PastEventAvgAggregateOutputType = {
    id: number | null
    locationId: number | null
  }

  export type PastEventSumAggregateOutputType = {
    id: number | null
    locationId: number | null
  }

  export type PastEventMinAggregateOutputType = {
    id: number | null
    title: string | null
    locationId: number | null
    date: Date | null
    description: string | null
  }

  export type PastEventMaxAggregateOutputType = {
    id: number | null
    title: string | null
    locationId: number | null
    date: Date | null
    description: string | null
  }

  export type PastEventCountAggregateOutputType = {
    id: number
    title: number
    locationId: number
    date: number
    description: number
    _all: number
  }


  export type PastEventAvgAggregateInputType = {
    id?: true
    locationId?: true
  }

  export type PastEventSumAggregateInputType = {
    id?: true
    locationId?: true
  }

  export type PastEventMinAggregateInputType = {
    id?: true
    title?: true
    locationId?: true
    date?: true
    description?: true
  }

  export type PastEventMaxAggregateInputType = {
    id?: true
    title?: true
    locationId?: true
    date?: true
    description?: true
  }

  export type PastEventCountAggregateInputType = {
    id?: true
    title?: true
    locationId?: true
    date?: true
    description?: true
    _all?: true
  }

  export type PastEventAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PastEvent to aggregate.
     */
    where?: PastEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PastEvents to fetch.
     */
    orderBy?: PastEventOrderByWithRelationInput | PastEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PastEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PastEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PastEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PastEvents
    **/
    _count?: true | PastEventCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PastEventAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PastEventSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PastEventMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PastEventMaxAggregateInputType
  }

  export type GetPastEventAggregateType<T extends PastEventAggregateArgs> = {
        [P in keyof T & keyof AggregatePastEvent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePastEvent[P]>
      : GetScalarType<T[P], AggregatePastEvent[P]>
  }




  export type PastEventGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PastEventWhereInput
    orderBy?: PastEventOrderByWithAggregationInput | PastEventOrderByWithAggregationInput[]
    by: PastEventScalarFieldEnum[] | PastEventScalarFieldEnum
    having?: PastEventScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PastEventCountAggregateInputType | true
    _avg?: PastEventAvgAggregateInputType
    _sum?: PastEventSumAggregateInputType
    _min?: PastEventMinAggregateInputType
    _max?: PastEventMaxAggregateInputType
  }

  export type PastEventGroupByOutputType = {
    id: number
    title: string
    locationId: number
    date: Date
    description: string | null
    _count: PastEventCountAggregateOutputType | null
    _avg: PastEventAvgAggregateOutputType | null
    _sum: PastEventSumAggregateOutputType | null
    _min: PastEventMinAggregateOutputType | null
    _max: PastEventMaxAggregateOutputType | null
  }

  type GetPastEventGroupByPayload<T extends PastEventGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PastEventGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PastEventGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PastEventGroupByOutputType[P]>
            : GetScalarType<T[P], PastEventGroupByOutputType[P]>
        }
      >
    >


  export type PastEventSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    locationId?: boolean
    date?: boolean
    description?: boolean
    location?: boolean | LocationDefaultArgs<ExtArgs>
    categories?: boolean | PastEvent$categoriesArgs<ExtArgs>
    users?: boolean | PastEvent$usersArgs<ExtArgs>
    _count?: boolean | PastEventCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["pastEvent"]>

  export type PastEventSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    locationId?: boolean
    date?: boolean
    description?: boolean
    location?: boolean | LocationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["pastEvent"]>

  export type PastEventSelectScalar = {
    id?: boolean
    title?: boolean
    locationId?: boolean
    date?: boolean
    description?: boolean
  }

  export type PastEventInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    location?: boolean | LocationDefaultArgs<ExtArgs>
    categories?: boolean | PastEvent$categoriesArgs<ExtArgs>
    users?: boolean | PastEvent$usersArgs<ExtArgs>
    _count?: boolean | PastEventCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PastEventIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    location?: boolean | LocationDefaultArgs<ExtArgs>
  }

  export type $PastEventPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PastEvent"
    objects: {
      location: Prisma.$LocationPayload<ExtArgs>
      categories: Prisma.$CategoryPayload<ExtArgs>[]
      users: Prisma.$UserPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      title: string
      locationId: number
      date: Date
      description: string | null
    }, ExtArgs["result"]["pastEvent"]>
    composites: {}
  }

  type PastEventGetPayload<S extends boolean | null | undefined | PastEventDefaultArgs> = $Result.GetResult<Prisma.$PastEventPayload, S>

  type PastEventCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PastEventFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PastEventCountAggregateInputType | true
    }

  export interface PastEventDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PastEvent'], meta: { name: 'PastEvent' } }
    /**
     * Find zero or one PastEvent that matches the filter.
     * @param {PastEventFindUniqueArgs} args - Arguments to find a PastEvent
     * @example
     * // Get one PastEvent
     * const pastEvent = await prisma.pastEvent.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PastEventFindUniqueArgs>(args: SelectSubset<T, PastEventFindUniqueArgs<ExtArgs>>): Prisma__PastEventClient<$Result.GetResult<Prisma.$PastEventPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one PastEvent that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PastEventFindUniqueOrThrowArgs} args - Arguments to find a PastEvent
     * @example
     * // Get one PastEvent
     * const pastEvent = await prisma.pastEvent.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PastEventFindUniqueOrThrowArgs>(args: SelectSubset<T, PastEventFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PastEventClient<$Result.GetResult<Prisma.$PastEventPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first PastEvent that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PastEventFindFirstArgs} args - Arguments to find a PastEvent
     * @example
     * // Get one PastEvent
     * const pastEvent = await prisma.pastEvent.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PastEventFindFirstArgs>(args?: SelectSubset<T, PastEventFindFirstArgs<ExtArgs>>): Prisma__PastEventClient<$Result.GetResult<Prisma.$PastEventPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first PastEvent that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PastEventFindFirstOrThrowArgs} args - Arguments to find a PastEvent
     * @example
     * // Get one PastEvent
     * const pastEvent = await prisma.pastEvent.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PastEventFindFirstOrThrowArgs>(args?: SelectSubset<T, PastEventFindFirstOrThrowArgs<ExtArgs>>): Prisma__PastEventClient<$Result.GetResult<Prisma.$PastEventPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more PastEvents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PastEventFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PastEvents
     * const pastEvents = await prisma.pastEvent.findMany()
     * 
     * // Get first 10 PastEvents
     * const pastEvents = await prisma.pastEvent.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const pastEventWithIdOnly = await prisma.pastEvent.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PastEventFindManyArgs>(args?: SelectSubset<T, PastEventFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PastEventPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a PastEvent.
     * @param {PastEventCreateArgs} args - Arguments to create a PastEvent.
     * @example
     * // Create one PastEvent
     * const PastEvent = await prisma.pastEvent.create({
     *   data: {
     *     // ... data to create a PastEvent
     *   }
     * })
     * 
     */
    create<T extends PastEventCreateArgs>(args: SelectSubset<T, PastEventCreateArgs<ExtArgs>>): Prisma__PastEventClient<$Result.GetResult<Prisma.$PastEventPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many PastEvents.
     * @param {PastEventCreateManyArgs} args - Arguments to create many PastEvents.
     * @example
     * // Create many PastEvents
     * const pastEvent = await prisma.pastEvent.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PastEventCreateManyArgs>(args?: SelectSubset<T, PastEventCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PastEvents and returns the data saved in the database.
     * @param {PastEventCreateManyAndReturnArgs} args - Arguments to create many PastEvents.
     * @example
     * // Create many PastEvents
     * const pastEvent = await prisma.pastEvent.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PastEvents and only return the `id`
     * const pastEventWithIdOnly = await prisma.pastEvent.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PastEventCreateManyAndReturnArgs>(args?: SelectSubset<T, PastEventCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PastEventPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a PastEvent.
     * @param {PastEventDeleteArgs} args - Arguments to delete one PastEvent.
     * @example
     * // Delete one PastEvent
     * const PastEvent = await prisma.pastEvent.delete({
     *   where: {
     *     // ... filter to delete one PastEvent
     *   }
     * })
     * 
     */
    delete<T extends PastEventDeleteArgs>(args: SelectSubset<T, PastEventDeleteArgs<ExtArgs>>): Prisma__PastEventClient<$Result.GetResult<Prisma.$PastEventPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one PastEvent.
     * @param {PastEventUpdateArgs} args - Arguments to update one PastEvent.
     * @example
     * // Update one PastEvent
     * const pastEvent = await prisma.pastEvent.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PastEventUpdateArgs>(args: SelectSubset<T, PastEventUpdateArgs<ExtArgs>>): Prisma__PastEventClient<$Result.GetResult<Prisma.$PastEventPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more PastEvents.
     * @param {PastEventDeleteManyArgs} args - Arguments to filter PastEvents to delete.
     * @example
     * // Delete a few PastEvents
     * const { count } = await prisma.pastEvent.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PastEventDeleteManyArgs>(args?: SelectSubset<T, PastEventDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PastEvents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PastEventUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PastEvents
     * const pastEvent = await prisma.pastEvent.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PastEventUpdateManyArgs>(args: SelectSubset<T, PastEventUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PastEvent.
     * @param {PastEventUpsertArgs} args - Arguments to update or create a PastEvent.
     * @example
     * // Update or create a PastEvent
     * const pastEvent = await prisma.pastEvent.upsert({
     *   create: {
     *     // ... data to create a PastEvent
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PastEvent we want to update
     *   }
     * })
     */
    upsert<T extends PastEventUpsertArgs>(args: SelectSubset<T, PastEventUpsertArgs<ExtArgs>>): Prisma__PastEventClient<$Result.GetResult<Prisma.$PastEventPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of PastEvents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PastEventCountArgs} args - Arguments to filter PastEvents to count.
     * @example
     * // Count the number of PastEvents
     * const count = await prisma.pastEvent.count({
     *   where: {
     *     // ... the filter for the PastEvents we want to count
     *   }
     * })
    **/
    count<T extends PastEventCountArgs>(
      args?: Subset<T, PastEventCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PastEventCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PastEvent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PastEventAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PastEventAggregateArgs>(args: Subset<T, PastEventAggregateArgs>): Prisma.PrismaPromise<GetPastEventAggregateType<T>>

    /**
     * Group by PastEvent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PastEventGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PastEventGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PastEventGroupByArgs['orderBy'] }
        : { orderBy?: PastEventGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PastEventGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPastEventGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PastEvent model
   */
  readonly fields: PastEventFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PastEvent.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PastEventClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    location<T extends LocationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LocationDefaultArgs<ExtArgs>>): Prisma__LocationClient<$Result.GetResult<Prisma.$LocationPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    categories<T extends PastEvent$categoriesArgs<ExtArgs> = {}>(args?: Subset<T, PastEvent$categoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findMany"> | Null>
    users<T extends PastEvent$usersArgs<ExtArgs> = {}>(args?: Subset<T, PastEvent$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PastEvent model
   */ 
  interface PastEventFieldRefs {
    readonly id: FieldRef<"PastEvent", 'Int'>
    readonly title: FieldRef<"PastEvent", 'String'>
    readonly locationId: FieldRef<"PastEvent", 'Int'>
    readonly date: FieldRef<"PastEvent", 'DateTime'>
    readonly description: FieldRef<"PastEvent", 'String'>
  }
    

  // Custom InputTypes
  /**
   * PastEvent findUnique
   */
  export type PastEventFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PastEvent
     */
    select?: PastEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PastEventInclude<ExtArgs> | null
    /**
     * Filter, which PastEvent to fetch.
     */
    where: PastEventWhereUniqueInput
  }

  /**
   * PastEvent findUniqueOrThrow
   */
  export type PastEventFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PastEvent
     */
    select?: PastEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PastEventInclude<ExtArgs> | null
    /**
     * Filter, which PastEvent to fetch.
     */
    where: PastEventWhereUniqueInput
  }

  /**
   * PastEvent findFirst
   */
  export type PastEventFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PastEvent
     */
    select?: PastEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PastEventInclude<ExtArgs> | null
    /**
     * Filter, which PastEvent to fetch.
     */
    where?: PastEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PastEvents to fetch.
     */
    orderBy?: PastEventOrderByWithRelationInput | PastEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PastEvents.
     */
    cursor?: PastEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PastEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PastEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PastEvents.
     */
    distinct?: PastEventScalarFieldEnum | PastEventScalarFieldEnum[]
  }

  /**
   * PastEvent findFirstOrThrow
   */
  export type PastEventFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PastEvent
     */
    select?: PastEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PastEventInclude<ExtArgs> | null
    /**
     * Filter, which PastEvent to fetch.
     */
    where?: PastEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PastEvents to fetch.
     */
    orderBy?: PastEventOrderByWithRelationInput | PastEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PastEvents.
     */
    cursor?: PastEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PastEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PastEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PastEvents.
     */
    distinct?: PastEventScalarFieldEnum | PastEventScalarFieldEnum[]
  }

  /**
   * PastEvent findMany
   */
  export type PastEventFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PastEvent
     */
    select?: PastEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PastEventInclude<ExtArgs> | null
    /**
     * Filter, which PastEvents to fetch.
     */
    where?: PastEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PastEvents to fetch.
     */
    orderBy?: PastEventOrderByWithRelationInput | PastEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PastEvents.
     */
    cursor?: PastEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PastEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PastEvents.
     */
    skip?: number
    distinct?: PastEventScalarFieldEnum | PastEventScalarFieldEnum[]
  }

  /**
   * PastEvent create
   */
  export type PastEventCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PastEvent
     */
    select?: PastEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PastEventInclude<ExtArgs> | null
    /**
     * The data needed to create a PastEvent.
     */
    data: XOR<PastEventCreateInput, PastEventUncheckedCreateInput>
  }

  /**
   * PastEvent createMany
   */
  export type PastEventCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PastEvents.
     */
    data: PastEventCreateManyInput | PastEventCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PastEvent createManyAndReturn
   */
  export type PastEventCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PastEvent
     */
    select?: PastEventSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many PastEvents.
     */
    data: PastEventCreateManyInput | PastEventCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PastEventIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PastEvent update
   */
  export type PastEventUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PastEvent
     */
    select?: PastEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PastEventInclude<ExtArgs> | null
    /**
     * The data needed to update a PastEvent.
     */
    data: XOR<PastEventUpdateInput, PastEventUncheckedUpdateInput>
    /**
     * Choose, which PastEvent to update.
     */
    where: PastEventWhereUniqueInput
  }

  /**
   * PastEvent updateMany
   */
  export type PastEventUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PastEvents.
     */
    data: XOR<PastEventUpdateManyMutationInput, PastEventUncheckedUpdateManyInput>
    /**
     * Filter which PastEvents to update
     */
    where?: PastEventWhereInput
  }

  /**
   * PastEvent upsert
   */
  export type PastEventUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PastEvent
     */
    select?: PastEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PastEventInclude<ExtArgs> | null
    /**
     * The filter to search for the PastEvent to update in case it exists.
     */
    where: PastEventWhereUniqueInput
    /**
     * In case the PastEvent found by the `where` argument doesn't exist, create a new PastEvent with this data.
     */
    create: XOR<PastEventCreateInput, PastEventUncheckedCreateInput>
    /**
     * In case the PastEvent was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PastEventUpdateInput, PastEventUncheckedUpdateInput>
  }

  /**
   * PastEvent delete
   */
  export type PastEventDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PastEvent
     */
    select?: PastEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PastEventInclude<ExtArgs> | null
    /**
     * Filter which PastEvent to delete.
     */
    where: PastEventWhereUniqueInput
  }

  /**
   * PastEvent deleteMany
   */
  export type PastEventDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PastEvents to delete
     */
    where?: PastEventWhereInput
  }

  /**
   * PastEvent.categories
   */
  export type PastEvent$categoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    where?: CategoryWhereInput
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    cursor?: CategoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * PastEvent.users
   */
  export type PastEvent$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * PastEvent without action
   */
  export type PastEventDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PastEvent
     */
    select?: PastEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PastEventInclude<ExtArgs> | null
  }


  /**
   * Model Question
   */

  export type AggregateQuestion = {
    _count: QuestionCountAggregateOutputType | null
    _avg: QuestionAvgAggregateOutputType | null
    _sum: QuestionSumAggregateOutputType | null
    _min: QuestionMinAggregateOutputType | null
    _max: QuestionMaxAggregateOutputType | null
  }

  export type QuestionAvgAggregateOutputType = {
    id: number | null
    categoryId: number | null
  }

  export type QuestionSumAggregateOutputType = {
    id: number | null
    categoryId: number | null
  }

  export type QuestionMinAggregateOutputType = {
    id: number | null
    question: string | null
    rightAnswer: string | null
    categoryId: number | null
  }

  export type QuestionMaxAggregateOutputType = {
    id: number | null
    question: string | null
    rightAnswer: string | null
    categoryId: number | null
  }

  export type QuestionCountAggregateOutputType = {
    id: number
    question: number
    answers: number
    rightAnswer: number
    categoryId: number
    _all: number
  }


  export type QuestionAvgAggregateInputType = {
    id?: true
    categoryId?: true
  }

  export type QuestionSumAggregateInputType = {
    id?: true
    categoryId?: true
  }

  export type QuestionMinAggregateInputType = {
    id?: true
    question?: true
    rightAnswer?: true
    categoryId?: true
  }

  export type QuestionMaxAggregateInputType = {
    id?: true
    question?: true
    rightAnswer?: true
    categoryId?: true
  }

  export type QuestionCountAggregateInputType = {
    id?: true
    question?: true
    answers?: true
    rightAnswer?: true
    categoryId?: true
    _all?: true
  }

  export type QuestionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Question to aggregate.
     */
    where?: QuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Questions to fetch.
     */
    orderBy?: QuestionOrderByWithRelationInput | QuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: QuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Questions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Questions
    **/
    _count?: true | QuestionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: QuestionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: QuestionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: QuestionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: QuestionMaxAggregateInputType
  }

  export type GetQuestionAggregateType<T extends QuestionAggregateArgs> = {
        [P in keyof T & keyof AggregateQuestion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateQuestion[P]>
      : GetScalarType<T[P], AggregateQuestion[P]>
  }




  export type QuestionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QuestionWhereInput
    orderBy?: QuestionOrderByWithAggregationInput | QuestionOrderByWithAggregationInput[]
    by: QuestionScalarFieldEnum[] | QuestionScalarFieldEnum
    having?: QuestionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: QuestionCountAggregateInputType | true
    _avg?: QuestionAvgAggregateInputType
    _sum?: QuestionSumAggregateInputType
    _min?: QuestionMinAggregateInputType
    _max?: QuestionMaxAggregateInputType
  }

  export type QuestionGroupByOutputType = {
    id: number
    question: string
    answers: string[]
    rightAnswer: string
    categoryId: number
    _count: QuestionCountAggregateOutputType | null
    _avg: QuestionAvgAggregateOutputType | null
    _sum: QuestionSumAggregateOutputType | null
    _min: QuestionMinAggregateOutputType | null
    _max: QuestionMaxAggregateOutputType | null
  }

  type GetQuestionGroupByPayload<T extends QuestionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<QuestionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof QuestionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], QuestionGroupByOutputType[P]>
            : GetScalarType<T[P], QuestionGroupByOutputType[P]>
        }
      >
    >


  export type QuestionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    question?: boolean
    answers?: boolean
    rightAnswer?: boolean
    categoryId?: boolean
    category?: boolean | CategoryDefaultArgs<ExtArgs>
    futureEvents?: boolean | Question$futureEventsArgs<ExtArgs>
    _count?: boolean | QuestionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["question"]>

  export type QuestionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    question?: boolean
    answers?: boolean
    rightAnswer?: boolean
    categoryId?: boolean
    category?: boolean | CategoryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["question"]>

  export type QuestionSelectScalar = {
    id?: boolean
    question?: boolean
    answers?: boolean
    rightAnswer?: boolean
    categoryId?: boolean
  }

  export type QuestionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    category?: boolean | CategoryDefaultArgs<ExtArgs>
    futureEvents?: boolean | Question$futureEventsArgs<ExtArgs>
    _count?: boolean | QuestionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type QuestionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    category?: boolean | CategoryDefaultArgs<ExtArgs>
  }

  export type $QuestionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Question"
    objects: {
      category: Prisma.$CategoryPayload<ExtArgs>
      futureEvents: Prisma.$FutureEventPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      question: string
      answers: string[]
      rightAnswer: string
      categoryId: number
    }, ExtArgs["result"]["question"]>
    composites: {}
  }

  type QuestionGetPayload<S extends boolean | null | undefined | QuestionDefaultArgs> = $Result.GetResult<Prisma.$QuestionPayload, S>

  type QuestionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<QuestionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: QuestionCountAggregateInputType | true
    }

  export interface QuestionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Question'], meta: { name: 'Question' } }
    /**
     * Find zero or one Question that matches the filter.
     * @param {QuestionFindUniqueArgs} args - Arguments to find a Question
     * @example
     * // Get one Question
     * const question = await prisma.question.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends QuestionFindUniqueArgs>(args: SelectSubset<T, QuestionFindUniqueArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Question that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {QuestionFindUniqueOrThrowArgs} args - Arguments to find a Question
     * @example
     * // Get one Question
     * const question = await prisma.question.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends QuestionFindUniqueOrThrowArgs>(args: SelectSubset<T, QuestionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Question that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionFindFirstArgs} args - Arguments to find a Question
     * @example
     * // Get one Question
     * const question = await prisma.question.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends QuestionFindFirstArgs>(args?: SelectSubset<T, QuestionFindFirstArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Question that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionFindFirstOrThrowArgs} args - Arguments to find a Question
     * @example
     * // Get one Question
     * const question = await prisma.question.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends QuestionFindFirstOrThrowArgs>(args?: SelectSubset<T, QuestionFindFirstOrThrowArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Questions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Questions
     * const questions = await prisma.question.findMany()
     * 
     * // Get first 10 Questions
     * const questions = await prisma.question.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const questionWithIdOnly = await prisma.question.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends QuestionFindManyArgs>(args?: SelectSubset<T, QuestionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Question.
     * @param {QuestionCreateArgs} args - Arguments to create a Question.
     * @example
     * // Create one Question
     * const Question = await prisma.question.create({
     *   data: {
     *     // ... data to create a Question
     *   }
     * })
     * 
     */
    create<T extends QuestionCreateArgs>(args: SelectSubset<T, QuestionCreateArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Questions.
     * @param {QuestionCreateManyArgs} args - Arguments to create many Questions.
     * @example
     * // Create many Questions
     * const question = await prisma.question.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends QuestionCreateManyArgs>(args?: SelectSubset<T, QuestionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Questions and returns the data saved in the database.
     * @param {QuestionCreateManyAndReturnArgs} args - Arguments to create many Questions.
     * @example
     * // Create many Questions
     * const question = await prisma.question.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Questions and only return the `id`
     * const questionWithIdOnly = await prisma.question.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends QuestionCreateManyAndReturnArgs>(args?: SelectSubset<T, QuestionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Question.
     * @param {QuestionDeleteArgs} args - Arguments to delete one Question.
     * @example
     * // Delete one Question
     * const Question = await prisma.question.delete({
     *   where: {
     *     // ... filter to delete one Question
     *   }
     * })
     * 
     */
    delete<T extends QuestionDeleteArgs>(args: SelectSubset<T, QuestionDeleteArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Question.
     * @param {QuestionUpdateArgs} args - Arguments to update one Question.
     * @example
     * // Update one Question
     * const question = await prisma.question.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends QuestionUpdateArgs>(args: SelectSubset<T, QuestionUpdateArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Questions.
     * @param {QuestionDeleteManyArgs} args - Arguments to filter Questions to delete.
     * @example
     * // Delete a few Questions
     * const { count } = await prisma.question.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends QuestionDeleteManyArgs>(args?: SelectSubset<T, QuestionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Questions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Questions
     * const question = await prisma.question.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends QuestionUpdateManyArgs>(args: SelectSubset<T, QuestionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Question.
     * @param {QuestionUpsertArgs} args - Arguments to update or create a Question.
     * @example
     * // Update or create a Question
     * const question = await prisma.question.upsert({
     *   create: {
     *     // ... data to create a Question
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Question we want to update
     *   }
     * })
     */
    upsert<T extends QuestionUpsertArgs>(args: SelectSubset<T, QuestionUpsertArgs<ExtArgs>>): Prisma__QuestionClient<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Questions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionCountArgs} args - Arguments to filter Questions to count.
     * @example
     * // Count the number of Questions
     * const count = await prisma.question.count({
     *   where: {
     *     // ... the filter for the Questions we want to count
     *   }
     * })
    **/
    count<T extends QuestionCountArgs>(
      args?: Subset<T, QuestionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], QuestionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Question.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends QuestionAggregateArgs>(args: Subset<T, QuestionAggregateArgs>): Prisma.PrismaPromise<GetQuestionAggregateType<T>>

    /**
     * Group by Question.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QuestionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends QuestionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: QuestionGroupByArgs['orderBy'] }
        : { orderBy?: QuestionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, QuestionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetQuestionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Question model
   */
  readonly fields: QuestionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Question.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__QuestionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    category<T extends CategoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CategoryDefaultArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    futureEvents<T extends Question$futureEventsArgs<ExtArgs> = {}>(args?: Subset<T, Question$futureEventsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FutureEventPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Question model
   */ 
  interface QuestionFieldRefs {
    readonly id: FieldRef<"Question", 'Int'>
    readonly question: FieldRef<"Question", 'String'>
    readonly answers: FieldRef<"Question", 'String[]'>
    readonly rightAnswer: FieldRef<"Question", 'String'>
    readonly categoryId: FieldRef<"Question", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Question findUnique
   */
  export type QuestionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * Filter, which Question to fetch.
     */
    where: QuestionWhereUniqueInput
  }

  /**
   * Question findUniqueOrThrow
   */
  export type QuestionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * Filter, which Question to fetch.
     */
    where: QuestionWhereUniqueInput
  }

  /**
   * Question findFirst
   */
  export type QuestionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * Filter, which Question to fetch.
     */
    where?: QuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Questions to fetch.
     */
    orderBy?: QuestionOrderByWithRelationInput | QuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Questions.
     */
    cursor?: QuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Questions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Questions.
     */
    distinct?: QuestionScalarFieldEnum | QuestionScalarFieldEnum[]
  }

  /**
   * Question findFirstOrThrow
   */
  export type QuestionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * Filter, which Question to fetch.
     */
    where?: QuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Questions to fetch.
     */
    orderBy?: QuestionOrderByWithRelationInput | QuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Questions.
     */
    cursor?: QuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Questions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Questions.
     */
    distinct?: QuestionScalarFieldEnum | QuestionScalarFieldEnum[]
  }

  /**
   * Question findMany
   */
  export type QuestionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * Filter, which Questions to fetch.
     */
    where?: QuestionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Questions to fetch.
     */
    orderBy?: QuestionOrderByWithRelationInput | QuestionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Questions.
     */
    cursor?: QuestionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Questions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Questions.
     */
    skip?: number
    distinct?: QuestionScalarFieldEnum | QuestionScalarFieldEnum[]
  }

  /**
   * Question create
   */
  export type QuestionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * The data needed to create a Question.
     */
    data: XOR<QuestionCreateInput, QuestionUncheckedCreateInput>
  }

  /**
   * Question createMany
   */
  export type QuestionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Questions.
     */
    data: QuestionCreateManyInput | QuestionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Question createManyAndReturn
   */
  export type QuestionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Questions.
     */
    data: QuestionCreateManyInput | QuestionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Question update
   */
  export type QuestionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * The data needed to update a Question.
     */
    data: XOR<QuestionUpdateInput, QuestionUncheckedUpdateInput>
    /**
     * Choose, which Question to update.
     */
    where: QuestionWhereUniqueInput
  }

  /**
   * Question updateMany
   */
  export type QuestionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Questions.
     */
    data: XOR<QuestionUpdateManyMutationInput, QuestionUncheckedUpdateManyInput>
    /**
     * Filter which Questions to update
     */
    where?: QuestionWhereInput
  }

  /**
   * Question upsert
   */
  export type QuestionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * The filter to search for the Question to update in case it exists.
     */
    where: QuestionWhereUniqueInput
    /**
     * In case the Question found by the `where` argument doesn't exist, create a new Question with this data.
     */
    create: XOR<QuestionCreateInput, QuestionUncheckedCreateInput>
    /**
     * In case the Question was found with the provided `where` argument, update it with this data.
     */
    update: XOR<QuestionUpdateInput, QuestionUncheckedUpdateInput>
  }

  /**
   * Question delete
   */
  export type QuestionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    /**
     * Filter which Question to delete.
     */
    where: QuestionWhereUniqueInput
  }

  /**
   * Question deleteMany
   */
  export type QuestionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Questions to delete
     */
    where?: QuestionWhereInput
  }

  /**
   * Question.futureEvents
   */
  export type Question$futureEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FutureEvent
     */
    select?: FutureEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FutureEventInclude<ExtArgs> | null
    where?: FutureEventWhereInput
    orderBy?: FutureEventOrderByWithRelationInput | FutureEventOrderByWithRelationInput[]
    cursor?: FutureEventWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FutureEventScalarFieldEnum | FutureEventScalarFieldEnum[]
  }

  /**
   * Question without action
   */
  export type QuestionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
  }


  /**
   * Model Category
   */

  export type AggregateCategory = {
    _count: CategoryCountAggregateOutputType | null
    _avg: CategoryAvgAggregateOutputType | null
    _sum: CategorySumAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  export type CategoryAvgAggregateOutputType = {
    id: number | null
  }

  export type CategorySumAggregateOutputType = {
    id: number | null
  }

  export type CategoryMinAggregateOutputType = {
    id: number | null
    name: string | null
    icon: string | null
  }

  export type CategoryMaxAggregateOutputType = {
    id: number | null
    name: string | null
    icon: string | null
  }

  export type CategoryCountAggregateOutputType = {
    id: number
    name: number
    icon: number
    _all: number
  }


  export type CategoryAvgAggregateInputType = {
    id?: true
  }

  export type CategorySumAggregateInputType = {
    id?: true
  }

  export type CategoryMinAggregateInputType = {
    id?: true
    name?: true
    icon?: true
  }

  export type CategoryMaxAggregateInputType = {
    id?: true
    name?: true
    icon?: true
  }

  export type CategoryCountAggregateInputType = {
    id?: true
    name?: true
    icon?: true
    _all?: true
  }

  export type CategoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Category to aggregate.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Categories
    **/
    _count?: true | CategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CategoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CategorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoryMaxAggregateInputType
  }

  export type GetCategoryAggregateType<T extends CategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategory[P]>
      : GetScalarType<T[P], AggregateCategory[P]>
  }




  export type CategoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoryWhereInput
    orderBy?: CategoryOrderByWithAggregationInput | CategoryOrderByWithAggregationInput[]
    by: CategoryScalarFieldEnum[] | CategoryScalarFieldEnum
    having?: CategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoryCountAggregateInputType | true
    _avg?: CategoryAvgAggregateInputType
    _sum?: CategorySumAggregateInputType
    _min?: CategoryMinAggregateInputType
    _max?: CategoryMaxAggregateInputType
  }

  export type CategoryGroupByOutputType = {
    id: number
    name: string
    icon: string
    _count: CategoryCountAggregateOutputType | null
    _avg: CategoryAvgAggregateOutputType | null
    _sum: CategorySumAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  type GetCategoryGroupByPayload<T extends CategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoryGroupByOutputType[P]>
            : GetScalarType<T[P], CategoryGroupByOutputType[P]>
        }
      >
    >


  export type CategorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    icon?: boolean
    question?: boolean | Category$questionArgs<ExtArgs>
    futureEvents?: boolean | Category$futureEventsArgs<ExtArgs>
    pastEvents?: boolean | Category$pastEventsArgs<ExtArgs>
    _count?: boolean | CategoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["category"]>

  export type CategorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    icon?: boolean
  }, ExtArgs["result"]["category"]>

  export type CategorySelectScalar = {
    id?: boolean
    name?: boolean
    icon?: boolean
  }

  export type CategoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    question?: boolean | Category$questionArgs<ExtArgs>
    futureEvents?: boolean | Category$futureEventsArgs<ExtArgs>
    pastEvents?: boolean | Category$pastEventsArgs<ExtArgs>
    _count?: boolean | CategoryCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CategoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $CategoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Category"
    objects: {
      question: Prisma.$QuestionPayload<ExtArgs>[]
      futureEvents: Prisma.$FutureEventPayload<ExtArgs>[]
      pastEvents: Prisma.$PastEventPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      icon: string
    }, ExtArgs["result"]["category"]>
    composites: {}
  }

  type CategoryGetPayload<S extends boolean | null | undefined | CategoryDefaultArgs> = $Result.GetResult<Prisma.$CategoryPayload, S>

  type CategoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CategoryFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CategoryCountAggregateInputType | true
    }

  export interface CategoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Category'], meta: { name: 'Category' } }
    /**
     * Find zero or one Category that matches the filter.
     * @param {CategoryFindUniqueArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CategoryFindUniqueArgs>(args: SelectSubset<T, CategoryFindUniqueArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Category that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CategoryFindUniqueOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CategoryFindUniqueOrThrowArgs>(args: SelectSubset<T, CategoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Category that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CategoryFindFirstArgs>(args?: SelectSubset<T, CategoryFindFirstArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Category that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CategoryFindFirstOrThrowArgs>(args?: SelectSubset<T, CategoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categories
     * const categories = await prisma.category.findMany()
     * 
     * // Get first 10 Categories
     * const categories = await prisma.category.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categoryWithIdOnly = await prisma.category.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CategoryFindManyArgs>(args?: SelectSubset<T, CategoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Category.
     * @param {CategoryCreateArgs} args - Arguments to create a Category.
     * @example
     * // Create one Category
     * const Category = await prisma.category.create({
     *   data: {
     *     // ... data to create a Category
     *   }
     * })
     * 
     */
    create<T extends CategoryCreateArgs>(args: SelectSubset<T, CategoryCreateArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Categories.
     * @param {CategoryCreateManyArgs} args - Arguments to create many Categories.
     * @example
     * // Create many Categories
     * const category = await prisma.category.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CategoryCreateManyArgs>(args?: SelectSubset<T, CategoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Categories and returns the data saved in the database.
     * @param {CategoryCreateManyAndReturnArgs} args - Arguments to create many Categories.
     * @example
     * // Create many Categories
     * const category = await prisma.category.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Categories and only return the `id`
     * const categoryWithIdOnly = await prisma.category.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CategoryCreateManyAndReturnArgs>(args?: SelectSubset<T, CategoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Category.
     * @param {CategoryDeleteArgs} args - Arguments to delete one Category.
     * @example
     * // Delete one Category
     * const Category = await prisma.category.delete({
     *   where: {
     *     // ... filter to delete one Category
     *   }
     * })
     * 
     */
    delete<T extends CategoryDeleteArgs>(args: SelectSubset<T, CategoryDeleteArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Category.
     * @param {CategoryUpdateArgs} args - Arguments to update one Category.
     * @example
     * // Update one Category
     * const category = await prisma.category.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CategoryUpdateArgs>(args: SelectSubset<T, CategoryUpdateArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Categories.
     * @param {CategoryDeleteManyArgs} args - Arguments to filter Categories to delete.
     * @example
     * // Delete a few Categories
     * const { count } = await prisma.category.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CategoryDeleteManyArgs>(args?: SelectSubset<T, CategoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categories
     * const category = await prisma.category.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CategoryUpdateManyArgs>(args: SelectSubset<T, CategoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Category.
     * @param {CategoryUpsertArgs} args - Arguments to update or create a Category.
     * @example
     * // Update or create a Category
     * const category = await prisma.category.upsert({
     *   create: {
     *     // ... data to create a Category
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Category we want to update
     *   }
     * })
     */
    upsert<T extends CategoryUpsertArgs>(args: SelectSubset<T, CategoryUpsertArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryCountArgs} args - Arguments to filter Categories to count.
     * @example
     * // Count the number of Categories
     * const count = await prisma.category.count({
     *   where: {
     *     // ... the filter for the Categories we want to count
     *   }
     * })
    **/
    count<T extends CategoryCountArgs>(
      args?: Subset<T, CategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoryAggregateArgs>(args: Subset<T, CategoryAggregateArgs>): Prisma.PrismaPromise<GetCategoryAggregateType<T>>

    /**
     * Group by Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategoryGroupByArgs['orderBy'] }
        : { orderBy?: CategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Category model
   */
  readonly fields: CategoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Category.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CategoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    question<T extends Category$questionArgs<ExtArgs> = {}>(args?: Subset<T, Category$questionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QuestionPayload<ExtArgs>, T, "findMany"> | Null>
    futureEvents<T extends Category$futureEventsArgs<ExtArgs> = {}>(args?: Subset<T, Category$futureEventsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FutureEventPayload<ExtArgs>, T, "findMany"> | Null>
    pastEvents<T extends Category$pastEventsArgs<ExtArgs> = {}>(args?: Subset<T, Category$pastEventsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PastEventPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Category model
   */ 
  interface CategoryFieldRefs {
    readonly id: FieldRef<"Category", 'Int'>
    readonly name: FieldRef<"Category", 'String'>
    readonly icon: FieldRef<"Category", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Category findUnique
   */
  export type CategoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category findUniqueOrThrow
   */
  export type CategoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category findFirst
   */
  export type CategoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category findFirstOrThrow
   */
  export type CategoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category findMany
   */
  export type CategoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Categories to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category create
   */
  export type CategoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The data needed to create a Category.
     */
    data: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
  }

  /**
   * Category createMany
   */
  export type CategoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Categories.
     */
    data: CategoryCreateManyInput | CategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Category createManyAndReturn
   */
  export type CategoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Categories.
     */
    data: CategoryCreateManyInput | CategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Category update
   */
  export type CategoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The data needed to update a Category.
     */
    data: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
    /**
     * Choose, which Category to update.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category updateMany
   */
  export type CategoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Categories.
     */
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyInput>
    /**
     * Filter which Categories to update
     */
    where?: CategoryWhereInput
  }

  /**
   * Category upsert
   */
  export type CategoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The filter to search for the Category to update in case it exists.
     */
    where: CategoryWhereUniqueInput
    /**
     * In case the Category found by the `where` argument doesn't exist, create a new Category with this data.
     */
    create: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
    /**
     * In case the Category was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
  }

  /**
   * Category delete
   */
  export type CategoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter which Category to delete.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category deleteMany
   */
  export type CategoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Categories to delete
     */
    where?: CategoryWhereInput
  }

  /**
   * Category.question
   */
  export type Category$questionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Question
     */
    select?: QuestionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QuestionInclude<ExtArgs> | null
    where?: QuestionWhereInput
    orderBy?: QuestionOrderByWithRelationInput | QuestionOrderByWithRelationInput[]
    cursor?: QuestionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QuestionScalarFieldEnum | QuestionScalarFieldEnum[]
  }

  /**
   * Category.futureEvents
   */
  export type Category$futureEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FutureEvent
     */
    select?: FutureEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FutureEventInclude<ExtArgs> | null
    where?: FutureEventWhereInput
    orderBy?: FutureEventOrderByWithRelationInput | FutureEventOrderByWithRelationInput[]
    cursor?: FutureEventWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FutureEventScalarFieldEnum | FutureEventScalarFieldEnum[]
  }

  /**
   * Category.pastEvents
   */
  export type Category$pastEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PastEvent
     */
    select?: PastEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PastEventInclude<ExtArgs> | null
    where?: PastEventWhereInput
    orderBy?: PastEventOrderByWithRelationInput | PastEventOrderByWithRelationInput[]
    cursor?: PastEventWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PastEventScalarFieldEnum | PastEventScalarFieldEnum[]
  }

  /**
   * Category without action
   */
  export type CategoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    role: 'role',
    username: 'username',
    createdAt: 'createdAt',
    email: 'email'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const FutureEventScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    title: 'title',
    image: 'image',
    date: 'date',
    published: 'published',
    locationId: 'locationId'
  };

  export type FutureEventScalarFieldEnum = (typeof FutureEventScalarFieldEnum)[keyof typeof FutureEventScalarFieldEnum]


  export const LocationScalarFieldEnum: {
    id: 'id',
    name: 'name',
    address: 'address',
    image: 'image'
  };

  export type LocationScalarFieldEnum = (typeof LocationScalarFieldEnum)[keyof typeof LocationScalarFieldEnum]


  export const PastEventScalarFieldEnum: {
    id: 'id',
    title: 'title',
    locationId: 'locationId',
    date: 'date',
    description: 'description'
  };

  export type PastEventScalarFieldEnum = (typeof PastEventScalarFieldEnum)[keyof typeof PastEventScalarFieldEnum]


  export const QuestionScalarFieldEnum: {
    id: 'id',
    question: 'question',
    answers: 'answers',
    rightAnswer: 'rightAnswer',
    categoryId: 'categoryId'
  };

  export type QuestionScalarFieldEnum = (typeof QuestionScalarFieldEnum)[keyof typeof QuestionScalarFieldEnum]


  export const CategoryScalarFieldEnum: {
    id: 'id',
    name: 'name',
    icon: 'icon'
  };

  export type CategoryScalarFieldEnum = (typeof CategoryScalarFieldEnum)[keyof typeof CategoryScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Role'
   */
  export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    


  /**
   * Reference to a field of type 'Role[]'
   */
  export type ListEnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    role?: EnumRoleFilter<"User"> | $Enums.Role
    username?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    email?: StringFilter<"User"> | string
    futureEvents?: FutureEventListRelationFilter
    pastEvents?: PastEventListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    role?: SortOrder
    username?: SortOrder
    createdAt?: SortOrder
    email?: SortOrder
    futureEvents?: FutureEventOrderByRelationAggregateInput
    pastEvents?: PastEventOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    username?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    role?: EnumRoleFilter<"User"> | $Enums.Role
    createdAt?: DateTimeFilter<"User"> | Date | string
    futureEvents?: FutureEventListRelationFilter
    pastEvents?: PastEventListRelationFilter
  }, "id" | "username" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    role?: SortOrder
    username?: SortOrder
    createdAt?: SortOrder
    email?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    role?: EnumRoleWithAggregatesFilter<"User"> | $Enums.Role
    username?: StringWithAggregatesFilter<"User"> | string
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    email?: StringWithAggregatesFilter<"User"> | string
  }

  export type FutureEventWhereInput = {
    AND?: FutureEventWhereInput | FutureEventWhereInput[]
    OR?: FutureEventWhereInput[]
    NOT?: FutureEventWhereInput | FutureEventWhereInput[]
    id?: IntFilter<"FutureEvent"> | number
    createdAt?: DateTimeFilter<"FutureEvent"> | Date | string
    title?: StringFilter<"FutureEvent"> | string
    image?: StringFilter<"FutureEvent"> | string
    date?: DateTimeFilter<"FutureEvent"> | Date | string
    published?: BoolFilter<"FutureEvent"> | boolean
    locationId?: IntFilter<"FutureEvent"> | number
    location?: XOR<LocationRelationFilter, LocationWhereInput>
    categories?: CategoryListRelationFilter
    users?: UserListRelationFilter
    questions?: QuestionListRelationFilter
  }

  export type FutureEventOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    title?: SortOrder
    image?: SortOrder
    date?: SortOrder
    published?: SortOrder
    locationId?: SortOrder
    location?: LocationOrderByWithRelationInput
    categories?: CategoryOrderByRelationAggregateInput
    users?: UserOrderByRelationAggregateInput
    questions?: QuestionOrderByRelationAggregateInput
  }

  export type FutureEventWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: FutureEventWhereInput | FutureEventWhereInput[]
    OR?: FutureEventWhereInput[]
    NOT?: FutureEventWhereInput | FutureEventWhereInput[]
    createdAt?: DateTimeFilter<"FutureEvent"> | Date | string
    title?: StringFilter<"FutureEvent"> | string
    image?: StringFilter<"FutureEvent"> | string
    date?: DateTimeFilter<"FutureEvent"> | Date | string
    published?: BoolFilter<"FutureEvent"> | boolean
    locationId?: IntFilter<"FutureEvent"> | number
    location?: XOR<LocationRelationFilter, LocationWhereInput>
    categories?: CategoryListRelationFilter
    users?: UserListRelationFilter
    questions?: QuestionListRelationFilter
  }, "id">

  export type FutureEventOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    title?: SortOrder
    image?: SortOrder
    date?: SortOrder
    published?: SortOrder
    locationId?: SortOrder
    _count?: FutureEventCountOrderByAggregateInput
    _avg?: FutureEventAvgOrderByAggregateInput
    _max?: FutureEventMaxOrderByAggregateInput
    _min?: FutureEventMinOrderByAggregateInput
    _sum?: FutureEventSumOrderByAggregateInput
  }

  export type FutureEventScalarWhereWithAggregatesInput = {
    AND?: FutureEventScalarWhereWithAggregatesInput | FutureEventScalarWhereWithAggregatesInput[]
    OR?: FutureEventScalarWhereWithAggregatesInput[]
    NOT?: FutureEventScalarWhereWithAggregatesInput | FutureEventScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"FutureEvent"> | number
    createdAt?: DateTimeWithAggregatesFilter<"FutureEvent"> | Date | string
    title?: StringWithAggregatesFilter<"FutureEvent"> | string
    image?: StringWithAggregatesFilter<"FutureEvent"> | string
    date?: DateTimeWithAggregatesFilter<"FutureEvent"> | Date | string
    published?: BoolWithAggregatesFilter<"FutureEvent"> | boolean
    locationId?: IntWithAggregatesFilter<"FutureEvent"> | number
  }

  export type LocationWhereInput = {
    AND?: LocationWhereInput | LocationWhereInput[]
    OR?: LocationWhereInput[]
    NOT?: LocationWhereInput | LocationWhereInput[]
    id?: IntFilter<"Location"> | number
    name?: StringFilter<"Location"> | string
    address?: StringFilter<"Location"> | string
    image?: StringFilter<"Location"> | string
    pastEvents?: PastEventListRelationFilter
    futureEvents?: FutureEventListRelationFilter
  }

  export type LocationOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    image?: SortOrder
    pastEvents?: PastEventOrderByRelationAggregateInput
    futureEvents?: FutureEventOrderByRelationAggregateInput
  }

  export type LocationWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name_address?: LocationNameAddressCompoundUniqueInput
    AND?: LocationWhereInput | LocationWhereInput[]
    OR?: LocationWhereInput[]
    NOT?: LocationWhereInput | LocationWhereInput[]
    name?: StringFilter<"Location"> | string
    address?: StringFilter<"Location"> | string
    image?: StringFilter<"Location"> | string
    pastEvents?: PastEventListRelationFilter
    futureEvents?: FutureEventListRelationFilter
  }, "id" | "name_address">

  export type LocationOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    image?: SortOrder
    _count?: LocationCountOrderByAggregateInput
    _avg?: LocationAvgOrderByAggregateInput
    _max?: LocationMaxOrderByAggregateInput
    _min?: LocationMinOrderByAggregateInput
    _sum?: LocationSumOrderByAggregateInput
  }

  export type LocationScalarWhereWithAggregatesInput = {
    AND?: LocationScalarWhereWithAggregatesInput | LocationScalarWhereWithAggregatesInput[]
    OR?: LocationScalarWhereWithAggregatesInput[]
    NOT?: LocationScalarWhereWithAggregatesInput | LocationScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Location"> | number
    name?: StringWithAggregatesFilter<"Location"> | string
    address?: StringWithAggregatesFilter<"Location"> | string
    image?: StringWithAggregatesFilter<"Location"> | string
  }

  export type PastEventWhereInput = {
    AND?: PastEventWhereInput | PastEventWhereInput[]
    OR?: PastEventWhereInput[]
    NOT?: PastEventWhereInput | PastEventWhereInput[]
    id?: IntFilter<"PastEvent"> | number
    title?: StringFilter<"PastEvent"> | string
    locationId?: IntFilter<"PastEvent"> | number
    date?: DateTimeFilter<"PastEvent"> | Date | string
    description?: StringNullableFilter<"PastEvent"> | string | null
    location?: XOR<LocationRelationFilter, LocationWhereInput>
    categories?: CategoryListRelationFilter
    users?: UserListRelationFilter
  }

  export type PastEventOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    locationId?: SortOrder
    date?: SortOrder
    description?: SortOrderInput | SortOrder
    location?: LocationOrderByWithRelationInput
    categories?: CategoryOrderByRelationAggregateInput
    users?: UserOrderByRelationAggregateInput
  }

  export type PastEventWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PastEventWhereInput | PastEventWhereInput[]
    OR?: PastEventWhereInput[]
    NOT?: PastEventWhereInput | PastEventWhereInput[]
    title?: StringFilter<"PastEvent"> | string
    locationId?: IntFilter<"PastEvent"> | number
    date?: DateTimeFilter<"PastEvent"> | Date | string
    description?: StringNullableFilter<"PastEvent"> | string | null
    location?: XOR<LocationRelationFilter, LocationWhereInput>
    categories?: CategoryListRelationFilter
    users?: UserListRelationFilter
  }, "id">

  export type PastEventOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    locationId?: SortOrder
    date?: SortOrder
    description?: SortOrderInput | SortOrder
    _count?: PastEventCountOrderByAggregateInput
    _avg?: PastEventAvgOrderByAggregateInput
    _max?: PastEventMaxOrderByAggregateInput
    _min?: PastEventMinOrderByAggregateInput
    _sum?: PastEventSumOrderByAggregateInput
  }

  export type PastEventScalarWhereWithAggregatesInput = {
    AND?: PastEventScalarWhereWithAggregatesInput | PastEventScalarWhereWithAggregatesInput[]
    OR?: PastEventScalarWhereWithAggregatesInput[]
    NOT?: PastEventScalarWhereWithAggregatesInput | PastEventScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"PastEvent"> | number
    title?: StringWithAggregatesFilter<"PastEvent"> | string
    locationId?: IntWithAggregatesFilter<"PastEvent"> | number
    date?: DateTimeWithAggregatesFilter<"PastEvent"> | Date | string
    description?: StringNullableWithAggregatesFilter<"PastEvent"> | string | null
  }

  export type QuestionWhereInput = {
    AND?: QuestionWhereInput | QuestionWhereInput[]
    OR?: QuestionWhereInput[]
    NOT?: QuestionWhereInput | QuestionWhereInput[]
    id?: IntFilter<"Question"> | number
    question?: StringFilter<"Question"> | string
    answers?: StringNullableListFilter<"Question">
    rightAnswer?: StringFilter<"Question"> | string
    categoryId?: IntFilter<"Question"> | number
    category?: XOR<CategoryRelationFilter, CategoryWhereInput>
    futureEvents?: FutureEventListRelationFilter
  }

  export type QuestionOrderByWithRelationInput = {
    id?: SortOrder
    question?: SortOrder
    answers?: SortOrder
    rightAnswer?: SortOrder
    categoryId?: SortOrder
    category?: CategoryOrderByWithRelationInput
    futureEvents?: FutureEventOrderByRelationAggregateInput
  }

  export type QuestionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: QuestionWhereInput | QuestionWhereInput[]
    OR?: QuestionWhereInput[]
    NOT?: QuestionWhereInput | QuestionWhereInput[]
    question?: StringFilter<"Question"> | string
    answers?: StringNullableListFilter<"Question">
    rightAnswer?: StringFilter<"Question"> | string
    categoryId?: IntFilter<"Question"> | number
    category?: XOR<CategoryRelationFilter, CategoryWhereInput>
    futureEvents?: FutureEventListRelationFilter
  }, "id">

  export type QuestionOrderByWithAggregationInput = {
    id?: SortOrder
    question?: SortOrder
    answers?: SortOrder
    rightAnswer?: SortOrder
    categoryId?: SortOrder
    _count?: QuestionCountOrderByAggregateInput
    _avg?: QuestionAvgOrderByAggregateInput
    _max?: QuestionMaxOrderByAggregateInput
    _min?: QuestionMinOrderByAggregateInput
    _sum?: QuestionSumOrderByAggregateInput
  }

  export type QuestionScalarWhereWithAggregatesInput = {
    AND?: QuestionScalarWhereWithAggregatesInput | QuestionScalarWhereWithAggregatesInput[]
    OR?: QuestionScalarWhereWithAggregatesInput[]
    NOT?: QuestionScalarWhereWithAggregatesInput | QuestionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Question"> | number
    question?: StringWithAggregatesFilter<"Question"> | string
    answers?: StringNullableListFilter<"Question">
    rightAnswer?: StringWithAggregatesFilter<"Question"> | string
    categoryId?: IntWithAggregatesFilter<"Question"> | number
  }

  export type CategoryWhereInput = {
    AND?: CategoryWhereInput | CategoryWhereInput[]
    OR?: CategoryWhereInput[]
    NOT?: CategoryWhereInput | CategoryWhereInput[]
    id?: IntFilter<"Category"> | number
    name?: StringFilter<"Category"> | string
    icon?: StringFilter<"Category"> | string
    question?: QuestionListRelationFilter
    futureEvents?: FutureEventListRelationFilter
    pastEvents?: PastEventListRelationFilter
  }

  export type CategoryOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    icon?: SortOrder
    question?: QuestionOrderByRelationAggregateInput
    futureEvents?: FutureEventOrderByRelationAggregateInput
    pastEvents?: PastEventOrderByRelationAggregateInput
  }

  export type CategoryWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    AND?: CategoryWhereInput | CategoryWhereInput[]
    OR?: CategoryWhereInput[]
    NOT?: CategoryWhereInput | CategoryWhereInput[]
    icon?: StringFilter<"Category"> | string
    question?: QuestionListRelationFilter
    futureEvents?: FutureEventListRelationFilter
    pastEvents?: PastEventListRelationFilter
  }, "id" | "name">

  export type CategoryOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    icon?: SortOrder
    _count?: CategoryCountOrderByAggregateInput
    _avg?: CategoryAvgOrderByAggregateInput
    _max?: CategoryMaxOrderByAggregateInput
    _min?: CategoryMinOrderByAggregateInput
    _sum?: CategorySumOrderByAggregateInput
  }

  export type CategoryScalarWhereWithAggregatesInput = {
    AND?: CategoryScalarWhereWithAggregatesInput | CategoryScalarWhereWithAggregatesInput[]
    OR?: CategoryScalarWhereWithAggregatesInput[]
    NOT?: CategoryScalarWhereWithAggregatesInput | CategoryScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Category"> | number
    name?: StringWithAggregatesFilter<"Category"> | string
    icon?: StringWithAggregatesFilter<"Category"> | string
  }

  export type UserCreateInput = {
    role?: $Enums.Role
    username: string
    createdAt?: Date | string
    email: string
    futureEvents?: FutureEventCreateNestedManyWithoutUsersInput
    pastEvents?: PastEventCreateNestedManyWithoutUsersInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    role?: $Enums.Role
    username: string
    createdAt?: Date | string
    email: string
    futureEvents?: FutureEventUncheckedCreateNestedManyWithoutUsersInput
    pastEvents?: PastEventUncheckedCreateNestedManyWithoutUsersInput
  }

  export type UserUpdateInput = {
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    username?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    futureEvents?: FutureEventUpdateManyWithoutUsersNestedInput
    pastEvents?: PastEventUpdateManyWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    username?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    futureEvents?: FutureEventUncheckedUpdateManyWithoutUsersNestedInput
    pastEvents?: PastEventUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    role?: $Enums.Role
    username: string
    createdAt?: Date | string
    email: string
  }

  export type UserUpdateManyMutationInput = {
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    username?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    username?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type FutureEventCreateInput = {
    createdAt?: Date | string
    title: string
    image: string
    date: Date | string
    published?: boolean
    location: LocationCreateNestedOneWithoutFutureEventsInput
    categories?: CategoryCreateNestedManyWithoutFutureEventsInput
    users?: UserCreateNestedManyWithoutFutureEventsInput
    questions?: QuestionCreateNestedManyWithoutFutureEventsInput
  }

  export type FutureEventUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    title: string
    image: string
    date: Date | string
    published?: boolean
    locationId: number
    categories?: CategoryUncheckedCreateNestedManyWithoutFutureEventsInput
    users?: UserUncheckedCreateNestedManyWithoutFutureEventsInput
    questions?: QuestionUncheckedCreateNestedManyWithoutFutureEventsInput
  }

  export type FutureEventUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    published?: BoolFieldUpdateOperationsInput | boolean
    location?: LocationUpdateOneRequiredWithoutFutureEventsNestedInput
    categories?: CategoryUpdateManyWithoutFutureEventsNestedInput
    users?: UserUpdateManyWithoutFutureEventsNestedInput
    questions?: QuestionUpdateManyWithoutFutureEventsNestedInput
  }

  export type FutureEventUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    published?: BoolFieldUpdateOperationsInput | boolean
    locationId?: IntFieldUpdateOperationsInput | number
    categories?: CategoryUncheckedUpdateManyWithoutFutureEventsNestedInput
    users?: UserUncheckedUpdateManyWithoutFutureEventsNestedInput
    questions?: QuestionUncheckedUpdateManyWithoutFutureEventsNestedInput
  }

  export type FutureEventCreateManyInput = {
    id?: number
    createdAt?: Date | string
    title: string
    image: string
    date: Date | string
    published?: boolean
    locationId: number
  }

  export type FutureEventUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    published?: BoolFieldUpdateOperationsInput | boolean
  }

  export type FutureEventUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    published?: BoolFieldUpdateOperationsInput | boolean
    locationId?: IntFieldUpdateOperationsInput | number
  }

  export type LocationCreateInput = {
    name: string
    address: string
    image: string
    pastEvents?: PastEventCreateNestedManyWithoutLocationInput
    futureEvents?: FutureEventCreateNestedManyWithoutLocationInput
  }

  export type LocationUncheckedCreateInput = {
    id?: number
    name: string
    address: string
    image: string
    pastEvents?: PastEventUncheckedCreateNestedManyWithoutLocationInput
    futureEvents?: FutureEventUncheckedCreateNestedManyWithoutLocationInput
  }

  export type LocationUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    pastEvents?: PastEventUpdateManyWithoutLocationNestedInput
    futureEvents?: FutureEventUpdateManyWithoutLocationNestedInput
  }

  export type LocationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    pastEvents?: PastEventUncheckedUpdateManyWithoutLocationNestedInput
    futureEvents?: FutureEventUncheckedUpdateManyWithoutLocationNestedInput
  }

  export type LocationCreateManyInput = {
    id?: number
    name: string
    address: string
    image: string
  }

  export type LocationUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
  }

  export type LocationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
  }

  export type PastEventCreateInput = {
    title: string
    date: Date | string
    description?: string | null
    location: LocationCreateNestedOneWithoutPastEventsInput
    categories?: CategoryCreateNestedManyWithoutPastEventsInput
    users?: UserCreateNestedManyWithoutPastEventsInput
  }

  export type PastEventUncheckedCreateInput = {
    id?: number
    title: string
    locationId: number
    date: Date | string
    description?: string | null
    categories?: CategoryUncheckedCreateNestedManyWithoutPastEventsInput
    users?: UserUncheckedCreateNestedManyWithoutPastEventsInput
  }

  export type PastEventUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: LocationUpdateOneRequiredWithoutPastEventsNestedInput
    categories?: CategoryUpdateManyWithoutPastEventsNestedInput
    users?: UserUpdateManyWithoutPastEventsNestedInput
  }

  export type PastEventUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    locationId?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    categories?: CategoryUncheckedUpdateManyWithoutPastEventsNestedInput
    users?: UserUncheckedUpdateManyWithoutPastEventsNestedInput
  }

  export type PastEventCreateManyInput = {
    id?: number
    title: string
    locationId: number
    date: Date | string
    description?: string | null
  }

  export type PastEventUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PastEventUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    locationId?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type QuestionCreateInput = {
    question: string
    answers?: QuestionCreateanswersInput | string[]
    rightAnswer: string
    category: CategoryCreateNestedOneWithoutQuestionInput
    futureEvents?: FutureEventCreateNestedManyWithoutQuestionsInput
  }

  export type QuestionUncheckedCreateInput = {
    id?: number
    question: string
    answers?: QuestionCreateanswersInput | string[]
    rightAnswer: string
    categoryId: number
    futureEvents?: FutureEventUncheckedCreateNestedManyWithoutQuestionsInput
  }

  export type QuestionUpdateInput = {
    question?: StringFieldUpdateOperationsInput | string
    answers?: QuestionUpdateanswersInput | string[]
    rightAnswer?: StringFieldUpdateOperationsInput | string
    category?: CategoryUpdateOneRequiredWithoutQuestionNestedInput
    futureEvents?: FutureEventUpdateManyWithoutQuestionsNestedInput
  }

  export type QuestionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    question?: StringFieldUpdateOperationsInput | string
    answers?: QuestionUpdateanswersInput | string[]
    rightAnswer?: StringFieldUpdateOperationsInput | string
    categoryId?: IntFieldUpdateOperationsInput | number
    futureEvents?: FutureEventUncheckedUpdateManyWithoutQuestionsNestedInput
  }

  export type QuestionCreateManyInput = {
    id?: number
    question: string
    answers?: QuestionCreateanswersInput | string[]
    rightAnswer: string
    categoryId: number
  }

  export type QuestionUpdateManyMutationInput = {
    question?: StringFieldUpdateOperationsInput | string
    answers?: QuestionUpdateanswersInput | string[]
    rightAnswer?: StringFieldUpdateOperationsInput | string
  }

  export type QuestionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    question?: StringFieldUpdateOperationsInput | string
    answers?: QuestionUpdateanswersInput | string[]
    rightAnswer?: StringFieldUpdateOperationsInput | string
    categoryId?: IntFieldUpdateOperationsInput | number
  }

  export type CategoryCreateInput = {
    name: string
    icon: string
    question?: QuestionCreateNestedManyWithoutCategoryInput
    futureEvents?: FutureEventCreateNestedManyWithoutCategoriesInput
    pastEvents?: PastEventCreateNestedManyWithoutCategoriesInput
  }

  export type CategoryUncheckedCreateInput = {
    id?: number
    name: string
    icon: string
    question?: QuestionUncheckedCreateNestedManyWithoutCategoryInput
    futureEvents?: FutureEventUncheckedCreateNestedManyWithoutCategoriesInput
    pastEvents?: PastEventUncheckedCreateNestedManyWithoutCategoriesInput
  }

  export type CategoryUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    icon?: StringFieldUpdateOperationsInput | string
    question?: QuestionUpdateManyWithoutCategoryNestedInput
    futureEvents?: FutureEventUpdateManyWithoutCategoriesNestedInput
    pastEvents?: PastEventUpdateManyWithoutCategoriesNestedInput
  }

  export type CategoryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    icon?: StringFieldUpdateOperationsInput | string
    question?: QuestionUncheckedUpdateManyWithoutCategoryNestedInput
    futureEvents?: FutureEventUncheckedUpdateManyWithoutCategoriesNestedInput
    pastEvents?: PastEventUncheckedUpdateManyWithoutCategoriesNestedInput
  }

  export type CategoryCreateManyInput = {
    id?: number
    name: string
    icon: string
  }

  export type CategoryUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    icon?: StringFieldUpdateOperationsInput | string
  }

  export type CategoryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    icon?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type EnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type FutureEventListRelationFilter = {
    every?: FutureEventWhereInput
    some?: FutureEventWhereInput
    none?: FutureEventWhereInput
  }

  export type PastEventListRelationFilter = {
    every?: PastEventWhereInput
    some?: PastEventWhereInput
    none?: PastEventWhereInput
  }

  export type FutureEventOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PastEventOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    role?: SortOrder
    username?: SortOrder
    createdAt?: SortOrder
    email?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    role?: SortOrder
    username?: SortOrder
    createdAt?: SortOrder
    email?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    role?: SortOrder
    username?: SortOrder
    createdAt?: SortOrder
    email?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type EnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type LocationRelationFilter = {
    is?: LocationWhereInput
    isNot?: LocationWhereInput
  }

  export type CategoryListRelationFilter = {
    every?: CategoryWhereInput
    some?: CategoryWhereInput
    none?: CategoryWhereInput
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type QuestionListRelationFilter = {
    every?: QuestionWhereInput
    some?: QuestionWhereInput
    none?: QuestionWhereInput
  }

  export type CategoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type QuestionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FutureEventCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    title?: SortOrder
    image?: SortOrder
    date?: SortOrder
    published?: SortOrder
    locationId?: SortOrder
  }

  export type FutureEventAvgOrderByAggregateInput = {
    id?: SortOrder
    locationId?: SortOrder
  }

  export type FutureEventMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    title?: SortOrder
    image?: SortOrder
    date?: SortOrder
    published?: SortOrder
    locationId?: SortOrder
  }

  export type FutureEventMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    title?: SortOrder
    image?: SortOrder
    date?: SortOrder
    published?: SortOrder
    locationId?: SortOrder
  }

  export type FutureEventSumOrderByAggregateInput = {
    id?: SortOrder
    locationId?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type LocationNameAddressCompoundUniqueInput = {
    name: string
    address: string
  }

  export type LocationCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    image?: SortOrder
  }

  export type LocationAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type LocationMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    image?: SortOrder
  }

  export type LocationMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    address?: SortOrder
    image?: SortOrder
  }

  export type LocationSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type PastEventCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    locationId?: SortOrder
    date?: SortOrder
    description?: SortOrder
  }

  export type PastEventAvgOrderByAggregateInput = {
    id?: SortOrder
    locationId?: SortOrder
  }

  export type PastEventMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    locationId?: SortOrder
    date?: SortOrder
    description?: SortOrder
  }

  export type PastEventMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    locationId?: SortOrder
    date?: SortOrder
    description?: SortOrder
  }

  export type PastEventSumOrderByAggregateInput = {
    id?: SortOrder
    locationId?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type CategoryRelationFilter = {
    is?: CategoryWhereInput
    isNot?: CategoryWhereInput
  }

  export type QuestionCountOrderByAggregateInput = {
    id?: SortOrder
    question?: SortOrder
    answers?: SortOrder
    rightAnswer?: SortOrder
    categoryId?: SortOrder
  }

  export type QuestionAvgOrderByAggregateInput = {
    id?: SortOrder
    categoryId?: SortOrder
  }

  export type QuestionMaxOrderByAggregateInput = {
    id?: SortOrder
    question?: SortOrder
    rightAnswer?: SortOrder
    categoryId?: SortOrder
  }

  export type QuestionMinOrderByAggregateInput = {
    id?: SortOrder
    question?: SortOrder
    rightAnswer?: SortOrder
    categoryId?: SortOrder
  }

  export type QuestionSumOrderByAggregateInput = {
    id?: SortOrder
    categoryId?: SortOrder
  }

  export type CategoryCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    icon?: SortOrder
  }

  export type CategoryAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    icon?: SortOrder
  }

  export type CategoryMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    icon?: SortOrder
  }

  export type CategorySumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type FutureEventCreateNestedManyWithoutUsersInput = {
    create?: XOR<FutureEventCreateWithoutUsersInput, FutureEventUncheckedCreateWithoutUsersInput> | FutureEventCreateWithoutUsersInput[] | FutureEventUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: FutureEventCreateOrConnectWithoutUsersInput | FutureEventCreateOrConnectWithoutUsersInput[]
    connect?: FutureEventWhereUniqueInput | FutureEventWhereUniqueInput[]
  }

  export type PastEventCreateNestedManyWithoutUsersInput = {
    create?: XOR<PastEventCreateWithoutUsersInput, PastEventUncheckedCreateWithoutUsersInput> | PastEventCreateWithoutUsersInput[] | PastEventUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: PastEventCreateOrConnectWithoutUsersInput | PastEventCreateOrConnectWithoutUsersInput[]
    connect?: PastEventWhereUniqueInput | PastEventWhereUniqueInput[]
  }

  export type FutureEventUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<FutureEventCreateWithoutUsersInput, FutureEventUncheckedCreateWithoutUsersInput> | FutureEventCreateWithoutUsersInput[] | FutureEventUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: FutureEventCreateOrConnectWithoutUsersInput | FutureEventCreateOrConnectWithoutUsersInput[]
    connect?: FutureEventWhereUniqueInput | FutureEventWhereUniqueInput[]
  }

  export type PastEventUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<PastEventCreateWithoutUsersInput, PastEventUncheckedCreateWithoutUsersInput> | PastEventCreateWithoutUsersInput[] | PastEventUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: PastEventCreateOrConnectWithoutUsersInput | PastEventCreateOrConnectWithoutUsersInput[]
    connect?: PastEventWhereUniqueInput | PastEventWhereUniqueInput[]
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: $Enums.Role
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type FutureEventUpdateManyWithoutUsersNestedInput = {
    create?: XOR<FutureEventCreateWithoutUsersInput, FutureEventUncheckedCreateWithoutUsersInput> | FutureEventCreateWithoutUsersInput[] | FutureEventUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: FutureEventCreateOrConnectWithoutUsersInput | FutureEventCreateOrConnectWithoutUsersInput[]
    upsert?: FutureEventUpsertWithWhereUniqueWithoutUsersInput | FutureEventUpsertWithWhereUniqueWithoutUsersInput[]
    set?: FutureEventWhereUniqueInput | FutureEventWhereUniqueInput[]
    disconnect?: FutureEventWhereUniqueInput | FutureEventWhereUniqueInput[]
    delete?: FutureEventWhereUniqueInput | FutureEventWhereUniqueInput[]
    connect?: FutureEventWhereUniqueInput | FutureEventWhereUniqueInput[]
    update?: FutureEventUpdateWithWhereUniqueWithoutUsersInput | FutureEventUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: FutureEventUpdateManyWithWhereWithoutUsersInput | FutureEventUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: FutureEventScalarWhereInput | FutureEventScalarWhereInput[]
  }

  export type PastEventUpdateManyWithoutUsersNestedInput = {
    create?: XOR<PastEventCreateWithoutUsersInput, PastEventUncheckedCreateWithoutUsersInput> | PastEventCreateWithoutUsersInput[] | PastEventUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: PastEventCreateOrConnectWithoutUsersInput | PastEventCreateOrConnectWithoutUsersInput[]
    upsert?: PastEventUpsertWithWhereUniqueWithoutUsersInput | PastEventUpsertWithWhereUniqueWithoutUsersInput[]
    set?: PastEventWhereUniqueInput | PastEventWhereUniqueInput[]
    disconnect?: PastEventWhereUniqueInput | PastEventWhereUniqueInput[]
    delete?: PastEventWhereUniqueInput | PastEventWhereUniqueInput[]
    connect?: PastEventWhereUniqueInput | PastEventWhereUniqueInput[]
    update?: PastEventUpdateWithWhereUniqueWithoutUsersInput | PastEventUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: PastEventUpdateManyWithWhereWithoutUsersInput | PastEventUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: PastEventScalarWhereInput | PastEventScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type FutureEventUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<FutureEventCreateWithoutUsersInput, FutureEventUncheckedCreateWithoutUsersInput> | FutureEventCreateWithoutUsersInput[] | FutureEventUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: FutureEventCreateOrConnectWithoutUsersInput | FutureEventCreateOrConnectWithoutUsersInput[]
    upsert?: FutureEventUpsertWithWhereUniqueWithoutUsersInput | FutureEventUpsertWithWhereUniqueWithoutUsersInput[]
    set?: FutureEventWhereUniqueInput | FutureEventWhereUniqueInput[]
    disconnect?: FutureEventWhereUniqueInput | FutureEventWhereUniqueInput[]
    delete?: FutureEventWhereUniqueInput | FutureEventWhereUniqueInput[]
    connect?: FutureEventWhereUniqueInput | FutureEventWhereUniqueInput[]
    update?: FutureEventUpdateWithWhereUniqueWithoutUsersInput | FutureEventUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: FutureEventUpdateManyWithWhereWithoutUsersInput | FutureEventUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: FutureEventScalarWhereInput | FutureEventScalarWhereInput[]
  }

  export type PastEventUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<PastEventCreateWithoutUsersInput, PastEventUncheckedCreateWithoutUsersInput> | PastEventCreateWithoutUsersInput[] | PastEventUncheckedCreateWithoutUsersInput[]
    connectOrCreate?: PastEventCreateOrConnectWithoutUsersInput | PastEventCreateOrConnectWithoutUsersInput[]
    upsert?: PastEventUpsertWithWhereUniqueWithoutUsersInput | PastEventUpsertWithWhereUniqueWithoutUsersInput[]
    set?: PastEventWhereUniqueInput | PastEventWhereUniqueInput[]
    disconnect?: PastEventWhereUniqueInput | PastEventWhereUniqueInput[]
    delete?: PastEventWhereUniqueInput | PastEventWhereUniqueInput[]
    connect?: PastEventWhereUniqueInput | PastEventWhereUniqueInput[]
    update?: PastEventUpdateWithWhereUniqueWithoutUsersInput | PastEventUpdateWithWhereUniqueWithoutUsersInput[]
    updateMany?: PastEventUpdateManyWithWhereWithoutUsersInput | PastEventUpdateManyWithWhereWithoutUsersInput[]
    deleteMany?: PastEventScalarWhereInput | PastEventScalarWhereInput[]
  }

  export type LocationCreateNestedOneWithoutFutureEventsInput = {
    create?: XOR<LocationCreateWithoutFutureEventsInput, LocationUncheckedCreateWithoutFutureEventsInput>
    connectOrCreate?: LocationCreateOrConnectWithoutFutureEventsInput
    connect?: LocationWhereUniqueInput
  }

  export type CategoryCreateNestedManyWithoutFutureEventsInput = {
    create?: XOR<CategoryCreateWithoutFutureEventsInput, CategoryUncheckedCreateWithoutFutureEventsInput> | CategoryCreateWithoutFutureEventsInput[] | CategoryUncheckedCreateWithoutFutureEventsInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutFutureEventsInput | CategoryCreateOrConnectWithoutFutureEventsInput[]
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
  }

  export type UserCreateNestedManyWithoutFutureEventsInput = {
    create?: XOR<UserCreateWithoutFutureEventsInput, UserUncheckedCreateWithoutFutureEventsInput> | UserCreateWithoutFutureEventsInput[] | UserUncheckedCreateWithoutFutureEventsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutFutureEventsInput | UserCreateOrConnectWithoutFutureEventsInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type QuestionCreateNestedManyWithoutFutureEventsInput = {
    create?: XOR<QuestionCreateWithoutFutureEventsInput, QuestionUncheckedCreateWithoutFutureEventsInput> | QuestionCreateWithoutFutureEventsInput[] | QuestionUncheckedCreateWithoutFutureEventsInput[]
    connectOrCreate?: QuestionCreateOrConnectWithoutFutureEventsInput | QuestionCreateOrConnectWithoutFutureEventsInput[]
    connect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
  }

  export type CategoryUncheckedCreateNestedManyWithoutFutureEventsInput = {
    create?: XOR<CategoryCreateWithoutFutureEventsInput, CategoryUncheckedCreateWithoutFutureEventsInput> | CategoryCreateWithoutFutureEventsInput[] | CategoryUncheckedCreateWithoutFutureEventsInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutFutureEventsInput | CategoryCreateOrConnectWithoutFutureEventsInput[]
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutFutureEventsInput = {
    create?: XOR<UserCreateWithoutFutureEventsInput, UserUncheckedCreateWithoutFutureEventsInput> | UserCreateWithoutFutureEventsInput[] | UserUncheckedCreateWithoutFutureEventsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutFutureEventsInput | UserCreateOrConnectWithoutFutureEventsInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type QuestionUncheckedCreateNestedManyWithoutFutureEventsInput = {
    create?: XOR<QuestionCreateWithoutFutureEventsInput, QuestionUncheckedCreateWithoutFutureEventsInput> | QuestionCreateWithoutFutureEventsInput[] | QuestionUncheckedCreateWithoutFutureEventsInput[]
    connectOrCreate?: QuestionCreateOrConnectWithoutFutureEventsInput | QuestionCreateOrConnectWithoutFutureEventsInput[]
    connect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type LocationUpdateOneRequiredWithoutFutureEventsNestedInput = {
    create?: XOR<LocationCreateWithoutFutureEventsInput, LocationUncheckedCreateWithoutFutureEventsInput>
    connectOrCreate?: LocationCreateOrConnectWithoutFutureEventsInput
    upsert?: LocationUpsertWithoutFutureEventsInput
    connect?: LocationWhereUniqueInput
    update?: XOR<XOR<LocationUpdateToOneWithWhereWithoutFutureEventsInput, LocationUpdateWithoutFutureEventsInput>, LocationUncheckedUpdateWithoutFutureEventsInput>
  }

  export type CategoryUpdateManyWithoutFutureEventsNestedInput = {
    create?: XOR<CategoryCreateWithoutFutureEventsInput, CategoryUncheckedCreateWithoutFutureEventsInput> | CategoryCreateWithoutFutureEventsInput[] | CategoryUncheckedCreateWithoutFutureEventsInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutFutureEventsInput | CategoryCreateOrConnectWithoutFutureEventsInput[]
    upsert?: CategoryUpsertWithWhereUniqueWithoutFutureEventsInput | CategoryUpsertWithWhereUniqueWithoutFutureEventsInput[]
    set?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    disconnect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    delete?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    update?: CategoryUpdateWithWhereUniqueWithoutFutureEventsInput | CategoryUpdateWithWhereUniqueWithoutFutureEventsInput[]
    updateMany?: CategoryUpdateManyWithWhereWithoutFutureEventsInput | CategoryUpdateManyWithWhereWithoutFutureEventsInput[]
    deleteMany?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
  }

  export type UserUpdateManyWithoutFutureEventsNestedInput = {
    create?: XOR<UserCreateWithoutFutureEventsInput, UserUncheckedCreateWithoutFutureEventsInput> | UserCreateWithoutFutureEventsInput[] | UserUncheckedCreateWithoutFutureEventsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutFutureEventsInput | UserCreateOrConnectWithoutFutureEventsInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutFutureEventsInput | UserUpsertWithWhereUniqueWithoutFutureEventsInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutFutureEventsInput | UserUpdateWithWhereUniqueWithoutFutureEventsInput[]
    updateMany?: UserUpdateManyWithWhereWithoutFutureEventsInput | UserUpdateManyWithWhereWithoutFutureEventsInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type QuestionUpdateManyWithoutFutureEventsNestedInput = {
    create?: XOR<QuestionCreateWithoutFutureEventsInput, QuestionUncheckedCreateWithoutFutureEventsInput> | QuestionCreateWithoutFutureEventsInput[] | QuestionUncheckedCreateWithoutFutureEventsInput[]
    connectOrCreate?: QuestionCreateOrConnectWithoutFutureEventsInput | QuestionCreateOrConnectWithoutFutureEventsInput[]
    upsert?: QuestionUpsertWithWhereUniqueWithoutFutureEventsInput | QuestionUpsertWithWhereUniqueWithoutFutureEventsInput[]
    set?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    disconnect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    delete?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    connect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    update?: QuestionUpdateWithWhereUniqueWithoutFutureEventsInput | QuestionUpdateWithWhereUniqueWithoutFutureEventsInput[]
    updateMany?: QuestionUpdateManyWithWhereWithoutFutureEventsInput | QuestionUpdateManyWithWhereWithoutFutureEventsInput[]
    deleteMany?: QuestionScalarWhereInput | QuestionScalarWhereInput[]
  }

  export type CategoryUncheckedUpdateManyWithoutFutureEventsNestedInput = {
    create?: XOR<CategoryCreateWithoutFutureEventsInput, CategoryUncheckedCreateWithoutFutureEventsInput> | CategoryCreateWithoutFutureEventsInput[] | CategoryUncheckedCreateWithoutFutureEventsInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutFutureEventsInput | CategoryCreateOrConnectWithoutFutureEventsInput[]
    upsert?: CategoryUpsertWithWhereUniqueWithoutFutureEventsInput | CategoryUpsertWithWhereUniqueWithoutFutureEventsInput[]
    set?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    disconnect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    delete?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    update?: CategoryUpdateWithWhereUniqueWithoutFutureEventsInput | CategoryUpdateWithWhereUniqueWithoutFutureEventsInput[]
    updateMany?: CategoryUpdateManyWithWhereWithoutFutureEventsInput | CategoryUpdateManyWithWhereWithoutFutureEventsInput[]
    deleteMany?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutFutureEventsNestedInput = {
    create?: XOR<UserCreateWithoutFutureEventsInput, UserUncheckedCreateWithoutFutureEventsInput> | UserCreateWithoutFutureEventsInput[] | UserUncheckedCreateWithoutFutureEventsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutFutureEventsInput | UserCreateOrConnectWithoutFutureEventsInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutFutureEventsInput | UserUpsertWithWhereUniqueWithoutFutureEventsInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutFutureEventsInput | UserUpdateWithWhereUniqueWithoutFutureEventsInput[]
    updateMany?: UserUpdateManyWithWhereWithoutFutureEventsInput | UserUpdateManyWithWhereWithoutFutureEventsInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type QuestionUncheckedUpdateManyWithoutFutureEventsNestedInput = {
    create?: XOR<QuestionCreateWithoutFutureEventsInput, QuestionUncheckedCreateWithoutFutureEventsInput> | QuestionCreateWithoutFutureEventsInput[] | QuestionUncheckedCreateWithoutFutureEventsInput[]
    connectOrCreate?: QuestionCreateOrConnectWithoutFutureEventsInput | QuestionCreateOrConnectWithoutFutureEventsInput[]
    upsert?: QuestionUpsertWithWhereUniqueWithoutFutureEventsInput | QuestionUpsertWithWhereUniqueWithoutFutureEventsInput[]
    set?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    disconnect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    delete?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    connect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    update?: QuestionUpdateWithWhereUniqueWithoutFutureEventsInput | QuestionUpdateWithWhereUniqueWithoutFutureEventsInput[]
    updateMany?: QuestionUpdateManyWithWhereWithoutFutureEventsInput | QuestionUpdateManyWithWhereWithoutFutureEventsInput[]
    deleteMany?: QuestionScalarWhereInput | QuestionScalarWhereInput[]
  }

  export type PastEventCreateNestedManyWithoutLocationInput = {
    create?: XOR<PastEventCreateWithoutLocationInput, PastEventUncheckedCreateWithoutLocationInput> | PastEventCreateWithoutLocationInput[] | PastEventUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: PastEventCreateOrConnectWithoutLocationInput | PastEventCreateOrConnectWithoutLocationInput[]
    createMany?: PastEventCreateManyLocationInputEnvelope
    connect?: PastEventWhereUniqueInput | PastEventWhereUniqueInput[]
  }

  export type FutureEventCreateNestedManyWithoutLocationInput = {
    create?: XOR<FutureEventCreateWithoutLocationInput, FutureEventUncheckedCreateWithoutLocationInput> | FutureEventCreateWithoutLocationInput[] | FutureEventUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: FutureEventCreateOrConnectWithoutLocationInput | FutureEventCreateOrConnectWithoutLocationInput[]
    createMany?: FutureEventCreateManyLocationInputEnvelope
    connect?: FutureEventWhereUniqueInput | FutureEventWhereUniqueInput[]
  }

  export type PastEventUncheckedCreateNestedManyWithoutLocationInput = {
    create?: XOR<PastEventCreateWithoutLocationInput, PastEventUncheckedCreateWithoutLocationInput> | PastEventCreateWithoutLocationInput[] | PastEventUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: PastEventCreateOrConnectWithoutLocationInput | PastEventCreateOrConnectWithoutLocationInput[]
    createMany?: PastEventCreateManyLocationInputEnvelope
    connect?: PastEventWhereUniqueInput | PastEventWhereUniqueInput[]
  }

  export type FutureEventUncheckedCreateNestedManyWithoutLocationInput = {
    create?: XOR<FutureEventCreateWithoutLocationInput, FutureEventUncheckedCreateWithoutLocationInput> | FutureEventCreateWithoutLocationInput[] | FutureEventUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: FutureEventCreateOrConnectWithoutLocationInput | FutureEventCreateOrConnectWithoutLocationInput[]
    createMany?: FutureEventCreateManyLocationInputEnvelope
    connect?: FutureEventWhereUniqueInput | FutureEventWhereUniqueInput[]
  }

  export type PastEventUpdateManyWithoutLocationNestedInput = {
    create?: XOR<PastEventCreateWithoutLocationInput, PastEventUncheckedCreateWithoutLocationInput> | PastEventCreateWithoutLocationInput[] | PastEventUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: PastEventCreateOrConnectWithoutLocationInput | PastEventCreateOrConnectWithoutLocationInput[]
    upsert?: PastEventUpsertWithWhereUniqueWithoutLocationInput | PastEventUpsertWithWhereUniqueWithoutLocationInput[]
    createMany?: PastEventCreateManyLocationInputEnvelope
    set?: PastEventWhereUniqueInput | PastEventWhereUniqueInput[]
    disconnect?: PastEventWhereUniqueInput | PastEventWhereUniqueInput[]
    delete?: PastEventWhereUniqueInput | PastEventWhereUniqueInput[]
    connect?: PastEventWhereUniqueInput | PastEventWhereUniqueInput[]
    update?: PastEventUpdateWithWhereUniqueWithoutLocationInput | PastEventUpdateWithWhereUniqueWithoutLocationInput[]
    updateMany?: PastEventUpdateManyWithWhereWithoutLocationInput | PastEventUpdateManyWithWhereWithoutLocationInput[]
    deleteMany?: PastEventScalarWhereInput | PastEventScalarWhereInput[]
  }

  export type FutureEventUpdateManyWithoutLocationNestedInput = {
    create?: XOR<FutureEventCreateWithoutLocationInput, FutureEventUncheckedCreateWithoutLocationInput> | FutureEventCreateWithoutLocationInput[] | FutureEventUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: FutureEventCreateOrConnectWithoutLocationInput | FutureEventCreateOrConnectWithoutLocationInput[]
    upsert?: FutureEventUpsertWithWhereUniqueWithoutLocationInput | FutureEventUpsertWithWhereUniqueWithoutLocationInput[]
    createMany?: FutureEventCreateManyLocationInputEnvelope
    set?: FutureEventWhereUniqueInput | FutureEventWhereUniqueInput[]
    disconnect?: FutureEventWhereUniqueInput | FutureEventWhereUniqueInput[]
    delete?: FutureEventWhereUniqueInput | FutureEventWhereUniqueInput[]
    connect?: FutureEventWhereUniqueInput | FutureEventWhereUniqueInput[]
    update?: FutureEventUpdateWithWhereUniqueWithoutLocationInput | FutureEventUpdateWithWhereUniqueWithoutLocationInput[]
    updateMany?: FutureEventUpdateManyWithWhereWithoutLocationInput | FutureEventUpdateManyWithWhereWithoutLocationInput[]
    deleteMany?: FutureEventScalarWhereInput | FutureEventScalarWhereInput[]
  }

  export type PastEventUncheckedUpdateManyWithoutLocationNestedInput = {
    create?: XOR<PastEventCreateWithoutLocationInput, PastEventUncheckedCreateWithoutLocationInput> | PastEventCreateWithoutLocationInput[] | PastEventUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: PastEventCreateOrConnectWithoutLocationInput | PastEventCreateOrConnectWithoutLocationInput[]
    upsert?: PastEventUpsertWithWhereUniqueWithoutLocationInput | PastEventUpsertWithWhereUniqueWithoutLocationInput[]
    createMany?: PastEventCreateManyLocationInputEnvelope
    set?: PastEventWhereUniqueInput | PastEventWhereUniqueInput[]
    disconnect?: PastEventWhereUniqueInput | PastEventWhereUniqueInput[]
    delete?: PastEventWhereUniqueInput | PastEventWhereUniqueInput[]
    connect?: PastEventWhereUniqueInput | PastEventWhereUniqueInput[]
    update?: PastEventUpdateWithWhereUniqueWithoutLocationInput | PastEventUpdateWithWhereUniqueWithoutLocationInput[]
    updateMany?: PastEventUpdateManyWithWhereWithoutLocationInput | PastEventUpdateManyWithWhereWithoutLocationInput[]
    deleteMany?: PastEventScalarWhereInput | PastEventScalarWhereInput[]
  }

  export type FutureEventUncheckedUpdateManyWithoutLocationNestedInput = {
    create?: XOR<FutureEventCreateWithoutLocationInput, FutureEventUncheckedCreateWithoutLocationInput> | FutureEventCreateWithoutLocationInput[] | FutureEventUncheckedCreateWithoutLocationInput[]
    connectOrCreate?: FutureEventCreateOrConnectWithoutLocationInput | FutureEventCreateOrConnectWithoutLocationInput[]
    upsert?: FutureEventUpsertWithWhereUniqueWithoutLocationInput | FutureEventUpsertWithWhereUniqueWithoutLocationInput[]
    createMany?: FutureEventCreateManyLocationInputEnvelope
    set?: FutureEventWhereUniqueInput | FutureEventWhereUniqueInput[]
    disconnect?: FutureEventWhereUniqueInput | FutureEventWhereUniqueInput[]
    delete?: FutureEventWhereUniqueInput | FutureEventWhereUniqueInput[]
    connect?: FutureEventWhereUniqueInput | FutureEventWhereUniqueInput[]
    update?: FutureEventUpdateWithWhereUniqueWithoutLocationInput | FutureEventUpdateWithWhereUniqueWithoutLocationInput[]
    updateMany?: FutureEventUpdateManyWithWhereWithoutLocationInput | FutureEventUpdateManyWithWhereWithoutLocationInput[]
    deleteMany?: FutureEventScalarWhereInput | FutureEventScalarWhereInput[]
  }

  export type LocationCreateNestedOneWithoutPastEventsInput = {
    create?: XOR<LocationCreateWithoutPastEventsInput, LocationUncheckedCreateWithoutPastEventsInput>
    connectOrCreate?: LocationCreateOrConnectWithoutPastEventsInput
    connect?: LocationWhereUniqueInput
  }

  export type CategoryCreateNestedManyWithoutPastEventsInput = {
    create?: XOR<CategoryCreateWithoutPastEventsInput, CategoryUncheckedCreateWithoutPastEventsInput> | CategoryCreateWithoutPastEventsInput[] | CategoryUncheckedCreateWithoutPastEventsInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutPastEventsInput | CategoryCreateOrConnectWithoutPastEventsInput[]
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
  }

  export type UserCreateNestedManyWithoutPastEventsInput = {
    create?: XOR<UserCreateWithoutPastEventsInput, UserUncheckedCreateWithoutPastEventsInput> | UserCreateWithoutPastEventsInput[] | UserUncheckedCreateWithoutPastEventsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutPastEventsInput | UserCreateOrConnectWithoutPastEventsInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type CategoryUncheckedCreateNestedManyWithoutPastEventsInput = {
    create?: XOR<CategoryCreateWithoutPastEventsInput, CategoryUncheckedCreateWithoutPastEventsInput> | CategoryCreateWithoutPastEventsInput[] | CategoryUncheckedCreateWithoutPastEventsInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutPastEventsInput | CategoryCreateOrConnectWithoutPastEventsInput[]
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutPastEventsInput = {
    create?: XOR<UserCreateWithoutPastEventsInput, UserUncheckedCreateWithoutPastEventsInput> | UserCreateWithoutPastEventsInput[] | UserUncheckedCreateWithoutPastEventsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutPastEventsInput | UserCreateOrConnectWithoutPastEventsInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type LocationUpdateOneRequiredWithoutPastEventsNestedInput = {
    create?: XOR<LocationCreateWithoutPastEventsInput, LocationUncheckedCreateWithoutPastEventsInput>
    connectOrCreate?: LocationCreateOrConnectWithoutPastEventsInput
    upsert?: LocationUpsertWithoutPastEventsInput
    connect?: LocationWhereUniqueInput
    update?: XOR<XOR<LocationUpdateToOneWithWhereWithoutPastEventsInput, LocationUpdateWithoutPastEventsInput>, LocationUncheckedUpdateWithoutPastEventsInput>
  }

  export type CategoryUpdateManyWithoutPastEventsNestedInput = {
    create?: XOR<CategoryCreateWithoutPastEventsInput, CategoryUncheckedCreateWithoutPastEventsInput> | CategoryCreateWithoutPastEventsInput[] | CategoryUncheckedCreateWithoutPastEventsInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutPastEventsInput | CategoryCreateOrConnectWithoutPastEventsInput[]
    upsert?: CategoryUpsertWithWhereUniqueWithoutPastEventsInput | CategoryUpsertWithWhereUniqueWithoutPastEventsInput[]
    set?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    disconnect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    delete?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    update?: CategoryUpdateWithWhereUniqueWithoutPastEventsInput | CategoryUpdateWithWhereUniqueWithoutPastEventsInput[]
    updateMany?: CategoryUpdateManyWithWhereWithoutPastEventsInput | CategoryUpdateManyWithWhereWithoutPastEventsInput[]
    deleteMany?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
  }

  export type UserUpdateManyWithoutPastEventsNestedInput = {
    create?: XOR<UserCreateWithoutPastEventsInput, UserUncheckedCreateWithoutPastEventsInput> | UserCreateWithoutPastEventsInput[] | UserUncheckedCreateWithoutPastEventsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutPastEventsInput | UserCreateOrConnectWithoutPastEventsInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutPastEventsInput | UserUpsertWithWhereUniqueWithoutPastEventsInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutPastEventsInput | UserUpdateWithWhereUniqueWithoutPastEventsInput[]
    updateMany?: UserUpdateManyWithWhereWithoutPastEventsInput | UserUpdateManyWithWhereWithoutPastEventsInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type CategoryUncheckedUpdateManyWithoutPastEventsNestedInput = {
    create?: XOR<CategoryCreateWithoutPastEventsInput, CategoryUncheckedCreateWithoutPastEventsInput> | CategoryCreateWithoutPastEventsInput[] | CategoryUncheckedCreateWithoutPastEventsInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutPastEventsInput | CategoryCreateOrConnectWithoutPastEventsInput[]
    upsert?: CategoryUpsertWithWhereUniqueWithoutPastEventsInput | CategoryUpsertWithWhereUniqueWithoutPastEventsInput[]
    set?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    disconnect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    delete?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    update?: CategoryUpdateWithWhereUniqueWithoutPastEventsInput | CategoryUpdateWithWhereUniqueWithoutPastEventsInput[]
    updateMany?: CategoryUpdateManyWithWhereWithoutPastEventsInput | CategoryUpdateManyWithWhereWithoutPastEventsInput[]
    deleteMany?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutPastEventsNestedInput = {
    create?: XOR<UserCreateWithoutPastEventsInput, UserUncheckedCreateWithoutPastEventsInput> | UserCreateWithoutPastEventsInput[] | UserUncheckedCreateWithoutPastEventsInput[]
    connectOrCreate?: UserCreateOrConnectWithoutPastEventsInput | UserCreateOrConnectWithoutPastEventsInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutPastEventsInput | UserUpsertWithWhereUniqueWithoutPastEventsInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutPastEventsInput | UserUpdateWithWhereUniqueWithoutPastEventsInput[]
    updateMany?: UserUpdateManyWithWhereWithoutPastEventsInput | UserUpdateManyWithWhereWithoutPastEventsInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type QuestionCreateanswersInput = {
    set: string[]
  }

  export type CategoryCreateNestedOneWithoutQuestionInput = {
    create?: XOR<CategoryCreateWithoutQuestionInput, CategoryUncheckedCreateWithoutQuestionInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutQuestionInput
    connect?: CategoryWhereUniqueInput
  }

  export type FutureEventCreateNestedManyWithoutQuestionsInput = {
    create?: XOR<FutureEventCreateWithoutQuestionsInput, FutureEventUncheckedCreateWithoutQuestionsInput> | FutureEventCreateWithoutQuestionsInput[] | FutureEventUncheckedCreateWithoutQuestionsInput[]
    connectOrCreate?: FutureEventCreateOrConnectWithoutQuestionsInput | FutureEventCreateOrConnectWithoutQuestionsInput[]
    connect?: FutureEventWhereUniqueInput | FutureEventWhereUniqueInput[]
  }

  export type FutureEventUncheckedCreateNestedManyWithoutQuestionsInput = {
    create?: XOR<FutureEventCreateWithoutQuestionsInput, FutureEventUncheckedCreateWithoutQuestionsInput> | FutureEventCreateWithoutQuestionsInput[] | FutureEventUncheckedCreateWithoutQuestionsInput[]
    connectOrCreate?: FutureEventCreateOrConnectWithoutQuestionsInput | FutureEventCreateOrConnectWithoutQuestionsInput[]
    connect?: FutureEventWhereUniqueInput | FutureEventWhereUniqueInput[]
  }

  export type QuestionUpdateanswersInput = {
    set?: string[]
    push?: string | string[]
  }

  export type CategoryUpdateOneRequiredWithoutQuestionNestedInput = {
    create?: XOR<CategoryCreateWithoutQuestionInput, CategoryUncheckedCreateWithoutQuestionInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutQuestionInput
    upsert?: CategoryUpsertWithoutQuestionInput
    connect?: CategoryWhereUniqueInput
    update?: XOR<XOR<CategoryUpdateToOneWithWhereWithoutQuestionInput, CategoryUpdateWithoutQuestionInput>, CategoryUncheckedUpdateWithoutQuestionInput>
  }

  export type FutureEventUpdateManyWithoutQuestionsNestedInput = {
    create?: XOR<FutureEventCreateWithoutQuestionsInput, FutureEventUncheckedCreateWithoutQuestionsInput> | FutureEventCreateWithoutQuestionsInput[] | FutureEventUncheckedCreateWithoutQuestionsInput[]
    connectOrCreate?: FutureEventCreateOrConnectWithoutQuestionsInput | FutureEventCreateOrConnectWithoutQuestionsInput[]
    upsert?: FutureEventUpsertWithWhereUniqueWithoutQuestionsInput | FutureEventUpsertWithWhereUniqueWithoutQuestionsInput[]
    set?: FutureEventWhereUniqueInput | FutureEventWhereUniqueInput[]
    disconnect?: FutureEventWhereUniqueInput | FutureEventWhereUniqueInput[]
    delete?: FutureEventWhereUniqueInput | FutureEventWhereUniqueInput[]
    connect?: FutureEventWhereUniqueInput | FutureEventWhereUniqueInput[]
    update?: FutureEventUpdateWithWhereUniqueWithoutQuestionsInput | FutureEventUpdateWithWhereUniqueWithoutQuestionsInput[]
    updateMany?: FutureEventUpdateManyWithWhereWithoutQuestionsInput | FutureEventUpdateManyWithWhereWithoutQuestionsInput[]
    deleteMany?: FutureEventScalarWhereInput | FutureEventScalarWhereInput[]
  }

  export type FutureEventUncheckedUpdateManyWithoutQuestionsNestedInput = {
    create?: XOR<FutureEventCreateWithoutQuestionsInput, FutureEventUncheckedCreateWithoutQuestionsInput> | FutureEventCreateWithoutQuestionsInput[] | FutureEventUncheckedCreateWithoutQuestionsInput[]
    connectOrCreate?: FutureEventCreateOrConnectWithoutQuestionsInput | FutureEventCreateOrConnectWithoutQuestionsInput[]
    upsert?: FutureEventUpsertWithWhereUniqueWithoutQuestionsInput | FutureEventUpsertWithWhereUniqueWithoutQuestionsInput[]
    set?: FutureEventWhereUniqueInput | FutureEventWhereUniqueInput[]
    disconnect?: FutureEventWhereUniqueInput | FutureEventWhereUniqueInput[]
    delete?: FutureEventWhereUniqueInput | FutureEventWhereUniqueInput[]
    connect?: FutureEventWhereUniqueInput | FutureEventWhereUniqueInput[]
    update?: FutureEventUpdateWithWhereUniqueWithoutQuestionsInput | FutureEventUpdateWithWhereUniqueWithoutQuestionsInput[]
    updateMany?: FutureEventUpdateManyWithWhereWithoutQuestionsInput | FutureEventUpdateManyWithWhereWithoutQuestionsInput[]
    deleteMany?: FutureEventScalarWhereInput | FutureEventScalarWhereInput[]
  }

  export type QuestionCreateNestedManyWithoutCategoryInput = {
    create?: XOR<QuestionCreateWithoutCategoryInput, QuestionUncheckedCreateWithoutCategoryInput> | QuestionCreateWithoutCategoryInput[] | QuestionUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: QuestionCreateOrConnectWithoutCategoryInput | QuestionCreateOrConnectWithoutCategoryInput[]
    createMany?: QuestionCreateManyCategoryInputEnvelope
    connect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
  }

  export type FutureEventCreateNestedManyWithoutCategoriesInput = {
    create?: XOR<FutureEventCreateWithoutCategoriesInput, FutureEventUncheckedCreateWithoutCategoriesInput> | FutureEventCreateWithoutCategoriesInput[] | FutureEventUncheckedCreateWithoutCategoriesInput[]
    connectOrCreate?: FutureEventCreateOrConnectWithoutCategoriesInput | FutureEventCreateOrConnectWithoutCategoriesInput[]
    connect?: FutureEventWhereUniqueInput | FutureEventWhereUniqueInput[]
  }

  export type PastEventCreateNestedManyWithoutCategoriesInput = {
    create?: XOR<PastEventCreateWithoutCategoriesInput, PastEventUncheckedCreateWithoutCategoriesInput> | PastEventCreateWithoutCategoriesInput[] | PastEventUncheckedCreateWithoutCategoriesInput[]
    connectOrCreate?: PastEventCreateOrConnectWithoutCategoriesInput | PastEventCreateOrConnectWithoutCategoriesInput[]
    connect?: PastEventWhereUniqueInput | PastEventWhereUniqueInput[]
  }

  export type QuestionUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<QuestionCreateWithoutCategoryInput, QuestionUncheckedCreateWithoutCategoryInput> | QuestionCreateWithoutCategoryInput[] | QuestionUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: QuestionCreateOrConnectWithoutCategoryInput | QuestionCreateOrConnectWithoutCategoryInput[]
    createMany?: QuestionCreateManyCategoryInputEnvelope
    connect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
  }

  export type FutureEventUncheckedCreateNestedManyWithoutCategoriesInput = {
    create?: XOR<FutureEventCreateWithoutCategoriesInput, FutureEventUncheckedCreateWithoutCategoriesInput> | FutureEventCreateWithoutCategoriesInput[] | FutureEventUncheckedCreateWithoutCategoriesInput[]
    connectOrCreate?: FutureEventCreateOrConnectWithoutCategoriesInput | FutureEventCreateOrConnectWithoutCategoriesInput[]
    connect?: FutureEventWhereUniqueInput | FutureEventWhereUniqueInput[]
  }

  export type PastEventUncheckedCreateNestedManyWithoutCategoriesInput = {
    create?: XOR<PastEventCreateWithoutCategoriesInput, PastEventUncheckedCreateWithoutCategoriesInput> | PastEventCreateWithoutCategoriesInput[] | PastEventUncheckedCreateWithoutCategoriesInput[]
    connectOrCreate?: PastEventCreateOrConnectWithoutCategoriesInput | PastEventCreateOrConnectWithoutCategoriesInput[]
    connect?: PastEventWhereUniqueInput | PastEventWhereUniqueInput[]
  }

  export type QuestionUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<QuestionCreateWithoutCategoryInput, QuestionUncheckedCreateWithoutCategoryInput> | QuestionCreateWithoutCategoryInput[] | QuestionUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: QuestionCreateOrConnectWithoutCategoryInput | QuestionCreateOrConnectWithoutCategoryInput[]
    upsert?: QuestionUpsertWithWhereUniqueWithoutCategoryInput | QuestionUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: QuestionCreateManyCategoryInputEnvelope
    set?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    disconnect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    delete?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    connect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    update?: QuestionUpdateWithWhereUniqueWithoutCategoryInput | QuestionUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: QuestionUpdateManyWithWhereWithoutCategoryInput | QuestionUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: QuestionScalarWhereInput | QuestionScalarWhereInput[]
  }

  export type FutureEventUpdateManyWithoutCategoriesNestedInput = {
    create?: XOR<FutureEventCreateWithoutCategoriesInput, FutureEventUncheckedCreateWithoutCategoriesInput> | FutureEventCreateWithoutCategoriesInput[] | FutureEventUncheckedCreateWithoutCategoriesInput[]
    connectOrCreate?: FutureEventCreateOrConnectWithoutCategoriesInput | FutureEventCreateOrConnectWithoutCategoriesInput[]
    upsert?: FutureEventUpsertWithWhereUniqueWithoutCategoriesInput | FutureEventUpsertWithWhereUniqueWithoutCategoriesInput[]
    set?: FutureEventWhereUniqueInput | FutureEventWhereUniqueInput[]
    disconnect?: FutureEventWhereUniqueInput | FutureEventWhereUniqueInput[]
    delete?: FutureEventWhereUniqueInput | FutureEventWhereUniqueInput[]
    connect?: FutureEventWhereUniqueInput | FutureEventWhereUniqueInput[]
    update?: FutureEventUpdateWithWhereUniqueWithoutCategoriesInput | FutureEventUpdateWithWhereUniqueWithoutCategoriesInput[]
    updateMany?: FutureEventUpdateManyWithWhereWithoutCategoriesInput | FutureEventUpdateManyWithWhereWithoutCategoriesInput[]
    deleteMany?: FutureEventScalarWhereInput | FutureEventScalarWhereInput[]
  }

  export type PastEventUpdateManyWithoutCategoriesNestedInput = {
    create?: XOR<PastEventCreateWithoutCategoriesInput, PastEventUncheckedCreateWithoutCategoriesInput> | PastEventCreateWithoutCategoriesInput[] | PastEventUncheckedCreateWithoutCategoriesInput[]
    connectOrCreate?: PastEventCreateOrConnectWithoutCategoriesInput | PastEventCreateOrConnectWithoutCategoriesInput[]
    upsert?: PastEventUpsertWithWhereUniqueWithoutCategoriesInput | PastEventUpsertWithWhereUniqueWithoutCategoriesInput[]
    set?: PastEventWhereUniqueInput | PastEventWhereUniqueInput[]
    disconnect?: PastEventWhereUniqueInput | PastEventWhereUniqueInput[]
    delete?: PastEventWhereUniqueInput | PastEventWhereUniqueInput[]
    connect?: PastEventWhereUniqueInput | PastEventWhereUniqueInput[]
    update?: PastEventUpdateWithWhereUniqueWithoutCategoriesInput | PastEventUpdateWithWhereUniqueWithoutCategoriesInput[]
    updateMany?: PastEventUpdateManyWithWhereWithoutCategoriesInput | PastEventUpdateManyWithWhereWithoutCategoriesInput[]
    deleteMany?: PastEventScalarWhereInput | PastEventScalarWhereInput[]
  }

  export type QuestionUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<QuestionCreateWithoutCategoryInput, QuestionUncheckedCreateWithoutCategoryInput> | QuestionCreateWithoutCategoryInput[] | QuestionUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: QuestionCreateOrConnectWithoutCategoryInput | QuestionCreateOrConnectWithoutCategoryInput[]
    upsert?: QuestionUpsertWithWhereUniqueWithoutCategoryInput | QuestionUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: QuestionCreateManyCategoryInputEnvelope
    set?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    disconnect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    delete?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    connect?: QuestionWhereUniqueInput | QuestionWhereUniqueInput[]
    update?: QuestionUpdateWithWhereUniqueWithoutCategoryInput | QuestionUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: QuestionUpdateManyWithWhereWithoutCategoryInput | QuestionUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: QuestionScalarWhereInput | QuestionScalarWhereInput[]
  }

  export type FutureEventUncheckedUpdateManyWithoutCategoriesNestedInput = {
    create?: XOR<FutureEventCreateWithoutCategoriesInput, FutureEventUncheckedCreateWithoutCategoriesInput> | FutureEventCreateWithoutCategoriesInput[] | FutureEventUncheckedCreateWithoutCategoriesInput[]
    connectOrCreate?: FutureEventCreateOrConnectWithoutCategoriesInput | FutureEventCreateOrConnectWithoutCategoriesInput[]
    upsert?: FutureEventUpsertWithWhereUniqueWithoutCategoriesInput | FutureEventUpsertWithWhereUniqueWithoutCategoriesInput[]
    set?: FutureEventWhereUniqueInput | FutureEventWhereUniqueInput[]
    disconnect?: FutureEventWhereUniqueInput | FutureEventWhereUniqueInput[]
    delete?: FutureEventWhereUniqueInput | FutureEventWhereUniqueInput[]
    connect?: FutureEventWhereUniqueInput | FutureEventWhereUniqueInput[]
    update?: FutureEventUpdateWithWhereUniqueWithoutCategoriesInput | FutureEventUpdateWithWhereUniqueWithoutCategoriesInput[]
    updateMany?: FutureEventUpdateManyWithWhereWithoutCategoriesInput | FutureEventUpdateManyWithWhereWithoutCategoriesInput[]
    deleteMany?: FutureEventScalarWhereInput | FutureEventScalarWhereInput[]
  }

  export type PastEventUncheckedUpdateManyWithoutCategoriesNestedInput = {
    create?: XOR<PastEventCreateWithoutCategoriesInput, PastEventUncheckedCreateWithoutCategoriesInput> | PastEventCreateWithoutCategoriesInput[] | PastEventUncheckedCreateWithoutCategoriesInput[]
    connectOrCreate?: PastEventCreateOrConnectWithoutCategoriesInput | PastEventCreateOrConnectWithoutCategoriesInput[]
    upsert?: PastEventUpsertWithWhereUniqueWithoutCategoriesInput | PastEventUpsertWithWhereUniqueWithoutCategoriesInput[]
    set?: PastEventWhereUniqueInput | PastEventWhereUniqueInput[]
    disconnect?: PastEventWhereUniqueInput | PastEventWhereUniqueInput[]
    delete?: PastEventWhereUniqueInput | PastEventWhereUniqueInput[]
    connect?: PastEventWhereUniqueInput | PastEventWhereUniqueInput[]
    update?: PastEventUpdateWithWhereUniqueWithoutCategoriesInput | PastEventUpdateWithWhereUniqueWithoutCategoriesInput[]
    updateMany?: PastEventUpdateManyWithWhereWithoutCategoriesInput | PastEventUpdateManyWithWhereWithoutCategoriesInput[]
    deleteMany?: PastEventScalarWhereInput | PastEventScalarWhereInput[]
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedEnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedEnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type FutureEventCreateWithoutUsersInput = {
    createdAt?: Date | string
    title: string
    image: string
    date: Date | string
    published?: boolean
    location: LocationCreateNestedOneWithoutFutureEventsInput
    categories?: CategoryCreateNestedManyWithoutFutureEventsInput
    questions?: QuestionCreateNestedManyWithoutFutureEventsInput
  }

  export type FutureEventUncheckedCreateWithoutUsersInput = {
    id?: number
    createdAt?: Date | string
    title: string
    image: string
    date: Date | string
    published?: boolean
    locationId: number
    categories?: CategoryUncheckedCreateNestedManyWithoutFutureEventsInput
    questions?: QuestionUncheckedCreateNestedManyWithoutFutureEventsInput
  }

  export type FutureEventCreateOrConnectWithoutUsersInput = {
    where: FutureEventWhereUniqueInput
    create: XOR<FutureEventCreateWithoutUsersInput, FutureEventUncheckedCreateWithoutUsersInput>
  }

  export type PastEventCreateWithoutUsersInput = {
    title: string
    date: Date | string
    description?: string | null
    location: LocationCreateNestedOneWithoutPastEventsInput
    categories?: CategoryCreateNestedManyWithoutPastEventsInput
  }

  export type PastEventUncheckedCreateWithoutUsersInput = {
    id?: number
    title: string
    locationId: number
    date: Date | string
    description?: string | null
    categories?: CategoryUncheckedCreateNestedManyWithoutPastEventsInput
  }

  export type PastEventCreateOrConnectWithoutUsersInput = {
    where: PastEventWhereUniqueInput
    create: XOR<PastEventCreateWithoutUsersInput, PastEventUncheckedCreateWithoutUsersInput>
  }

  export type FutureEventUpsertWithWhereUniqueWithoutUsersInput = {
    where: FutureEventWhereUniqueInput
    update: XOR<FutureEventUpdateWithoutUsersInput, FutureEventUncheckedUpdateWithoutUsersInput>
    create: XOR<FutureEventCreateWithoutUsersInput, FutureEventUncheckedCreateWithoutUsersInput>
  }

  export type FutureEventUpdateWithWhereUniqueWithoutUsersInput = {
    where: FutureEventWhereUniqueInput
    data: XOR<FutureEventUpdateWithoutUsersInput, FutureEventUncheckedUpdateWithoutUsersInput>
  }

  export type FutureEventUpdateManyWithWhereWithoutUsersInput = {
    where: FutureEventScalarWhereInput
    data: XOR<FutureEventUpdateManyMutationInput, FutureEventUncheckedUpdateManyWithoutUsersInput>
  }

  export type FutureEventScalarWhereInput = {
    AND?: FutureEventScalarWhereInput | FutureEventScalarWhereInput[]
    OR?: FutureEventScalarWhereInput[]
    NOT?: FutureEventScalarWhereInput | FutureEventScalarWhereInput[]
    id?: IntFilter<"FutureEvent"> | number
    createdAt?: DateTimeFilter<"FutureEvent"> | Date | string
    title?: StringFilter<"FutureEvent"> | string
    image?: StringFilter<"FutureEvent"> | string
    date?: DateTimeFilter<"FutureEvent"> | Date | string
    published?: BoolFilter<"FutureEvent"> | boolean
    locationId?: IntFilter<"FutureEvent"> | number
  }

  export type PastEventUpsertWithWhereUniqueWithoutUsersInput = {
    where: PastEventWhereUniqueInput
    update: XOR<PastEventUpdateWithoutUsersInput, PastEventUncheckedUpdateWithoutUsersInput>
    create: XOR<PastEventCreateWithoutUsersInput, PastEventUncheckedCreateWithoutUsersInput>
  }

  export type PastEventUpdateWithWhereUniqueWithoutUsersInput = {
    where: PastEventWhereUniqueInput
    data: XOR<PastEventUpdateWithoutUsersInput, PastEventUncheckedUpdateWithoutUsersInput>
  }

  export type PastEventUpdateManyWithWhereWithoutUsersInput = {
    where: PastEventScalarWhereInput
    data: XOR<PastEventUpdateManyMutationInput, PastEventUncheckedUpdateManyWithoutUsersInput>
  }

  export type PastEventScalarWhereInput = {
    AND?: PastEventScalarWhereInput | PastEventScalarWhereInput[]
    OR?: PastEventScalarWhereInput[]
    NOT?: PastEventScalarWhereInput | PastEventScalarWhereInput[]
    id?: IntFilter<"PastEvent"> | number
    title?: StringFilter<"PastEvent"> | string
    locationId?: IntFilter<"PastEvent"> | number
    date?: DateTimeFilter<"PastEvent"> | Date | string
    description?: StringNullableFilter<"PastEvent"> | string | null
  }

  export type LocationCreateWithoutFutureEventsInput = {
    name: string
    address: string
    image: string
    pastEvents?: PastEventCreateNestedManyWithoutLocationInput
  }

  export type LocationUncheckedCreateWithoutFutureEventsInput = {
    id?: number
    name: string
    address: string
    image: string
    pastEvents?: PastEventUncheckedCreateNestedManyWithoutLocationInput
  }

  export type LocationCreateOrConnectWithoutFutureEventsInput = {
    where: LocationWhereUniqueInput
    create: XOR<LocationCreateWithoutFutureEventsInput, LocationUncheckedCreateWithoutFutureEventsInput>
  }

  export type CategoryCreateWithoutFutureEventsInput = {
    name: string
    icon: string
    question?: QuestionCreateNestedManyWithoutCategoryInput
    pastEvents?: PastEventCreateNestedManyWithoutCategoriesInput
  }

  export type CategoryUncheckedCreateWithoutFutureEventsInput = {
    id?: number
    name: string
    icon: string
    question?: QuestionUncheckedCreateNestedManyWithoutCategoryInput
    pastEvents?: PastEventUncheckedCreateNestedManyWithoutCategoriesInput
  }

  export type CategoryCreateOrConnectWithoutFutureEventsInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutFutureEventsInput, CategoryUncheckedCreateWithoutFutureEventsInput>
  }

  export type UserCreateWithoutFutureEventsInput = {
    role?: $Enums.Role
    username: string
    createdAt?: Date | string
    email: string
    pastEvents?: PastEventCreateNestedManyWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutFutureEventsInput = {
    id?: number
    role?: $Enums.Role
    username: string
    createdAt?: Date | string
    email: string
    pastEvents?: PastEventUncheckedCreateNestedManyWithoutUsersInput
  }

  export type UserCreateOrConnectWithoutFutureEventsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFutureEventsInput, UserUncheckedCreateWithoutFutureEventsInput>
  }

  export type QuestionCreateWithoutFutureEventsInput = {
    question: string
    answers?: QuestionCreateanswersInput | string[]
    rightAnswer: string
    category: CategoryCreateNestedOneWithoutQuestionInput
  }

  export type QuestionUncheckedCreateWithoutFutureEventsInput = {
    id?: number
    question: string
    answers?: QuestionCreateanswersInput | string[]
    rightAnswer: string
    categoryId: number
  }

  export type QuestionCreateOrConnectWithoutFutureEventsInput = {
    where: QuestionWhereUniqueInput
    create: XOR<QuestionCreateWithoutFutureEventsInput, QuestionUncheckedCreateWithoutFutureEventsInput>
  }

  export type LocationUpsertWithoutFutureEventsInput = {
    update: XOR<LocationUpdateWithoutFutureEventsInput, LocationUncheckedUpdateWithoutFutureEventsInput>
    create: XOR<LocationCreateWithoutFutureEventsInput, LocationUncheckedCreateWithoutFutureEventsInput>
    where?: LocationWhereInput
  }

  export type LocationUpdateToOneWithWhereWithoutFutureEventsInput = {
    where?: LocationWhereInput
    data: XOR<LocationUpdateWithoutFutureEventsInput, LocationUncheckedUpdateWithoutFutureEventsInput>
  }

  export type LocationUpdateWithoutFutureEventsInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    pastEvents?: PastEventUpdateManyWithoutLocationNestedInput
  }

  export type LocationUncheckedUpdateWithoutFutureEventsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    pastEvents?: PastEventUncheckedUpdateManyWithoutLocationNestedInput
  }

  export type CategoryUpsertWithWhereUniqueWithoutFutureEventsInput = {
    where: CategoryWhereUniqueInput
    update: XOR<CategoryUpdateWithoutFutureEventsInput, CategoryUncheckedUpdateWithoutFutureEventsInput>
    create: XOR<CategoryCreateWithoutFutureEventsInput, CategoryUncheckedCreateWithoutFutureEventsInput>
  }

  export type CategoryUpdateWithWhereUniqueWithoutFutureEventsInput = {
    where: CategoryWhereUniqueInput
    data: XOR<CategoryUpdateWithoutFutureEventsInput, CategoryUncheckedUpdateWithoutFutureEventsInput>
  }

  export type CategoryUpdateManyWithWhereWithoutFutureEventsInput = {
    where: CategoryScalarWhereInput
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyWithoutFutureEventsInput>
  }

  export type CategoryScalarWhereInput = {
    AND?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
    OR?: CategoryScalarWhereInput[]
    NOT?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
    id?: IntFilter<"Category"> | number
    name?: StringFilter<"Category"> | string
    icon?: StringFilter<"Category"> | string
  }

  export type UserUpsertWithWhereUniqueWithoutFutureEventsInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutFutureEventsInput, UserUncheckedUpdateWithoutFutureEventsInput>
    create: XOR<UserCreateWithoutFutureEventsInput, UserUncheckedCreateWithoutFutureEventsInput>
  }

  export type UserUpdateWithWhereUniqueWithoutFutureEventsInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutFutureEventsInput, UserUncheckedUpdateWithoutFutureEventsInput>
  }

  export type UserUpdateManyWithWhereWithoutFutureEventsInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutFutureEventsInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: IntFilter<"User"> | number
    role?: EnumRoleFilter<"User"> | $Enums.Role
    username?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    email?: StringFilter<"User"> | string
  }

  export type QuestionUpsertWithWhereUniqueWithoutFutureEventsInput = {
    where: QuestionWhereUniqueInput
    update: XOR<QuestionUpdateWithoutFutureEventsInput, QuestionUncheckedUpdateWithoutFutureEventsInput>
    create: XOR<QuestionCreateWithoutFutureEventsInput, QuestionUncheckedCreateWithoutFutureEventsInput>
  }

  export type QuestionUpdateWithWhereUniqueWithoutFutureEventsInput = {
    where: QuestionWhereUniqueInput
    data: XOR<QuestionUpdateWithoutFutureEventsInput, QuestionUncheckedUpdateWithoutFutureEventsInput>
  }

  export type QuestionUpdateManyWithWhereWithoutFutureEventsInput = {
    where: QuestionScalarWhereInput
    data: XOR<QuestionUpdateManyMutationInput, QuestionUncheckedUpdateManyWithoutFutureEventsInput>
  }

  export type QuestionScalarWhereInput = {
    AND?: QuestionScalarWhereInput | QuestionScalarWhereInput[]
    OR?: QuestionScalarWhereInput[]
    NOT?: QuestionScalarWhereInput | QuestionScalarWhereInput[]
    id?: IntFilter<"Question"> | number
    question?: StringFilter<"Question"> | string
    answers?: StringNullableListFilter<"Question">
    rightAnswer?: StringFilter<"Question"> | string
    categoryId?: IntFilter<"Question"> | number
  }

  export type PastEventCreateWithoutLocationInput = {
    title: string
    date: Date | string
    description?: string | null
    categories?: CategoryCreateNestedManyWithoutPastEventsInput
    users?: UserCreateNestedManyWithoutPastEventsInput
  }

  export type PastEventUncheckedCreateWithoutLocationInput = {
    id?: number
    title: string
    date: Date | string
    description?: string | null
    categories?: CategoryUncheckedCreateNestedManyWithoutPastEventsInput
    users?: UserUncheckedCreateNestedManyWithoutPastEventsInput
  }

  export type PastEventCreateOrConnectWithoutLocationInput = {
    where: PastEventWhereUniqueInput
    create: XOR<PastEventCreateWithoutLocationInput, PastEventUncheckedCreateWithoutLocationInput>
  }

  export type PastEventCreateManyLocationInputEnvelope = {
    data: PastEventCreateManyLocationInput | PastEventCreateManyLocationInput[]
    skipDuplicates?: boolean
  }

  export type FutureEventCreateWithoutLocationInput = {
    createdAt?: Date | string
    title: string
    image: string
    date: Date | string
    published?: boolean
    categories?: CategoryCreateNestedManyWithoutFutureEventsInput
    users?: UserCreateNestedManyWithoutFutureEventsInput
    questions?: QuestionCreateNestedManyWithoutFutureEventsInput
  }

  export type FutureEventUncheckedCreateWithoutLocationInput = {
    id?: number
    createdAt?: Date | string
    title: string
    image: string
    date: Date | string
    published?: boolean
    categories?: CategoryUncheckedCreateNestedManyWithoutFutureEventsInput
    users?: UserUncheckedCreateNestedManyWithoutFutureEventsInput
    questions?: QuestionUncheckedCreateNestedManyWithoutFutureEventsInput
  }

  export type FutureEventCreateOrConnectWithoutLocationInput = {
    where: FutureEventWhereUniqueInput
    create: XOR<FutureEventCreateWithoutLocationInput, FutureEventUncheckedCreateWithoutLocationInput>
  }

  export type FutureEventCreateManyLocationInputEnvelope = {
    data: FutureEventCreateManyLocationInput | FutureEventCreateManyLocationInput[]
    skipDuplicates?: boolean
  }

  export type PastEventUpsertWithWhereUniqueWithoutLocationInput = {
    where: PastEventWhereUniqueInput
    update: XOR<PastEventUpdateWithoutLocationInput, PastEventUncheckedUpdateWithoutLocationInput>
    create: XOR<PastEventCreateWithoutLocationInput, PastEventUncheckedCreateWithoutLocationInput>
  }

  export type PastEventUpdateWithWhereUniqueWithoutLocationInput = {
    where: PastEventWhereUniqueInput
    data: XOR<PastEventUpdateWithoutLocationInput, PastEventUncheckedUpdateWithoutLocationInput>
  }

  export type PastEventUpdateManyWithWhereWithoutLocationInput = {
    where: PastEventScalarWhereInput
    data: XOR<PastEventUpdateManyMutationInput, PastEventUncheckedUpdateManyWithoutLocationInput>
  }

  export type FutureEventUpsertWithWhereUniqueWithoutLocationInput = {
    where: FutureEventWhereUniqueInput
    update: XOR<FutureEventUpdateWithoutLocationInput, FutureEventUncheckedUpdateWithoutLocationInput>
    create: XOR<FutureEventCreateWithoutLocationInput, FutureEventUncheckedCreateWithoutLocationInput>
  }

  export type FutureEventUpdateWithWhereUniqueWithoutLocationInput = {
    where: FutureEventWhereUniqueInput
    data: XOR<FutureEventUpdateWithoutLocationInput, FutureEventUncheckedUpdateWithoutLocationInput>
  }

  export type FutureEventUpdateManyWithWhereWithoutLocationInput = {
    where: FutureEventScalarWhereInput
    data: XOR<FutureEventUpdateManyMutationInput, FutureEventUncheckedUpdateManyWithoutLocationInput>
  }

  export type LocationCreateWithoutPastEventsInput = {
    name: string
    address: string
    image: string
    futureEvents?: FutureEventCreateNestedManyWithoutLocationInput
  }

  export type LocationUncheckedCreateWithoutPastEventsInput = {
    id?: number
    name: string
    address: string
    image: string
    futureEvents?: FutureEventUncheckedCreateNestedManyWithoutLocationInput
  }

  export type LocationCreateOrConnectWithoutPastEventsInput = {
    where: LocationWhereUniqueInput
    create: XOR<LocationCreateWithoutPastEventsInput, LocationUncheckedCreateWithoutPastEventsInput>
  }

  export type CategoryCreateWithoutPastEventsInput = {
    name: string
    icon: string
    question?: QuestionCreateNestedManyWithoutCategoryInput
    futureEvents?: FutureEventCreateNestedManyWithoutCategoriesInput
  }

  export type CategoryUncheckedCreateWithoutPastEventsInput = {
    id?: number
    name: string
    icon: string
    question?: QuestionUncheckedCreateNestedManyWithoutCategoryInput
    futureEvents?: FutureEventUncheckedCreateNestedManyWithoutCategoriesInput
  }

  export type CategoryCreateOrConnectWithoutPastEventsInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutPastEventsInput, CategoryUncheckedCreateWithoutPastEventsInput>
  }

  export type UserCreateWithoutPastEventsInput = {
    role?: $Enums.Role
    username: string
    createdAt?: Date | string
    email: string
    futureEvents?: FutureEventCreateNestedManyWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutPastEventsInput = {
    id?: number
    role?: $Enums.Role
    username: string
    createdAt?: Date | string
    email: string
    futureEvents?: FutureEventUncheckedCreateNestedManyWithoutUsersInput
  }

  export type UserCreateOrConnectWithoutPastEventsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPastEventsInput, UserUncheckedCreateWithoutPastEventsInput>
  }

  export type LocationUpsertWithoutPastEventsInput = {
    update: XOR<LocationUpdateWithoutPastEventsInput, LocationUncheckedUpdateWithoutPastEventsInput>
    create: XOR<LocationCreateWithoutPastEventsInput, LocationUncheckedCreateWithoutPastEventsInput>
    where?: LocationWhereInput
  }

  export type LocationUpdateToOneWithWhereWithoutPastEventsInput = {
    where?: LocationWhereInput
    data: XOR<LocationUpdateWithoutPastEventsInput, LocationUncheckedUpdateWithoutPastEventsInput>
  }

  export type LocationUpdateWithoutPastEventsInput = {
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    futureEvents?: FutureEventUpdateManyWithoutLocationNestedInput
  }

  export type LocationUncheckedUpdateWithoutPastEventsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    futureEvents?: FutureEventUncheckedUpdateManyWithoutLocationNestedInput
  }

  export type CategoryUpsertWithWhereUniqueWithoutPastEventsInput = {
    where: CategoryWhereUniqueInput
    update: XOR<CategoryUpdateWithoutPastEventsInput, CategoryUncheckedUpdateWithoutPastEventsInput>
    create: XOR<CategoryCreateWithoutPastEventsInput, CategoryUncheckedCreateWithoutPastEventsInput>
  }

  export type CategoryUpdateWithWhereUniqueWithoutPastEventsInput = {
    where: CategoryWhereUniqueInput
    data: XOR<CategoryUpdateWithoutPastEventsInput, CategoryUncheckedUpdateWithoutPastEventsInput>
  }

  export type CategoryUpdateManyWithWhereWithoutPastEventsInput = {
    where: CategoryScalarWhereInput
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyWithoutPastEventsInput>
  }

  export type UserUpsertWithWhereUniqueWithoutPastEventsInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutPastEventsInput, UserUncheckedUpdateWithoutPastEventsInput>
    create: XOR<UserCreateWithoutPastEventsInput, UserUncheckedCreateWithoutPastEventsInput>
  }

  export type UserUpdateWithWhereUniqueWithoutPastEventsInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutPastEventsInput, UserUncheckedUpdateWithoutPastEventsInput>
  }

  export type UserUpdateManyWithWhereWithoutPastEventsInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutPastEventsInput>
  }

  export type CategoryCreateWithoutQuestionInput = {
    name: string
    icon: string
    futureEvents?: FutureEventCreateNestedManyWithoutCategoriesInput
    pastEvents?: PastEventCreateNestedManyWithoutCategoriesInput
  }

  export type CategoryUncheckedCreateWithoutQuestionInput = {
    id?: number
    name: string
    icon: string
    futureEvents?: FutureEventUncheckedCreateNestedManyWithoutCategoriesInput
    pastEvents?: PastEventUncheckedCreateNestedManyWithoutCategoriesInput
  }

  export type CategoryCreateOrConnectWithoutQuestionInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutQuestionInput, CategoryUncheckedCreateWithoutQuestionInput>
  }

  export type FutureEventCreateWithoutQuestionsInput = {
    createdAt?: Date | string
    title: string
    image: string
    date: Date | string
    published?: boolean
    location: LocationCreateNestedOneWithoutFutureEventsInput
    categories?: CategoryCreateNestedManyWithoutFutureEventsInput
    users?: UserCreateNestedManyWithoutFutureEventsInput
  }

  export type FutureEventUncheckedCreateWithoutQuestionsInput = {
    id?: number
    createdAt?: Date | string
    title: string
    image: string
    date: Date | string
    published?: boolean
    locationId: number
    categories?: CategoryUncheckedCreateNestedManyWithoutFutureEventsInput
    users?: UserUncheckedCreateNestedManyWithoutFutureEventsInput
  }

  export type FutureEventCreateOrConnectWithoutQuestionsInput = {
    where: FutureEventWhereUniqueInput
    create: XOR<FutureEventCreateWithoutQuestionsInput, FutureEventUncheckedCreateWithoutQuestionsInput>
  }

  export type CategoryUpsertWithoutQuestionInput = {
    update: XOR<CategoryUpdateWithoutQuestionInput, CategoryUncheckedUpdateWithoutQuestionInput>
    create: XOR<CategoryCreateWithoutQuestionInput, CategoryUncheckedCreateWithoutQuestionInput>
    where?: CategoryWhereInput
  }

  export type CategoryUpdateToOneWithWhereWithoutQuestionInput = {
    where?: CategoryWhereInput
    data: XOR<CategoryUpdateWithoutQuestionInput, CategoryUncheckedUpdateWithoutQuestionInput>
  }

  export type CategoryUpdateWithoutQuestionInput = {
    name?: StringFieldUpdateOperationsInput | string
    icon?: StringFieldUpdateOperationsInput | string
    futureEvents?: FutureEventUpdateManyWithoutCategoriesNestedInput
    pastEvents?: PastEventUpdateManyWithoutCategoriesNestedInput
  }

  export type CategoryUncheckedUpdateWithoutQuestionInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    icon?: StringFieldUpdateOperationsInput | string
    futureEvents?: FutureEventUncheckedUpdateManyWithoutCategoriesNestedInput
    pastEvents?: PastEventUncheckedUpdateManyWithoutCategoriesNestedInput
  }

  export type FutureEventUpsertWithWhereUniqueWithoutQuestionsInput = {
    where: FutureEventWhereUniqueInput
    update: XOR<FutureEventUpdateWithoutQuestionsInput, FutureEventUncheckedUpdateWithoutQuestionsInput>
    create: XOR<FutureEventCreateWithoutQuestionsInput, FutureEventUncheckedCreateWithoutQuestionsInput>
  }

  export type FutureEventUpdateWithWhereUniqueWithoutQuestionsInput = {
    where: FutureEventWhereUniqueInput
    data: XOR<FutureEventUpdateWithoutQuestionsInput, FutureEventUncheckedUpdateWithoutQuestionsInput>
  }

  export type FutureEventUpdateManyWithWhereWithoutQuestionsInput = {
    where: FutureEventScalarWhereInput
    data: XOR<FutureEventUpdateManyMutationInput, FutureEventUncheckedUpdateManyWithoutQuestionsInput>
  }

  export type QuestionCreateWithoutCategoryInput = {
    question: string
    answers?: QuestionCreateanswersInput | string[]
    rightAnswer: string
    futureEvents?: FutureEventCreateNestedManyWithoutQuestionsInput
  }

  export type QuestionUncheckedCreateWithoutCategoryInput = {
    id?: number
    question: string
    answers?: QuestionCreateanswersInput | string[]
    rightAnswer: string
    futureEvents?: FutureEventUncheckedCreateNestedManyWithoutQuestionsInput
  }

  export type QuestionCreateOrConnectWithoutCategoryInput = {
    where: QuestionWhereUniqueInput
    create: XOR<QuestionCreateWithoutCategoryInput, QuestionUncheckedCreateWithoutCategoryInput>
  }

  export type QuestionCreateManyCategoryInputEnvelope = {
    data: QuestionCreateManyCategoryInput | QuestionCreateManyCategoryInput[]
    skipDuplicates?: boolean
  }

  export type FutureEventCreateWithoutCategoriesInput = {
    createdAt?: Date | string
    title: string
    image: string
    date: Date | string
    published?: boolean
    location: LocationCreateNestedOneWithoutFutureEventsInput
    users?: UserCreateNestedManyWithoutFutureEventsInput
    questions?: QuestionCreateNestedManyWithoutFutureEventsInput
  }

  export type FutureEventUncheckedCreateWithoutCategoriesInput = {
    id?: number
    createdAt?: Date | string
    title: string
    image: string
    date: Date | string
    published?: boolean
    locationId: number
    users?: UserUncheckedCreateNestedManyWithoutFutureEventsInput
    questions?: QuestionUncheckedCreateNestedManyWithoutFutureEventsInput
  }

  export type FutureEventCreateOrConnectWithoutCategoriesInput = {
    where: FutureEventWhereUniqueInput
    create: XOR<FutureEventCreateWithoutCategoriesInput, FutureEventUncheckedCreateWithoutCategoriesInput>
  }

  export type PastEventCreateWithoutCategoriesInput = {
    title: string
    date: Date | string
    description?: string | null
    location: LocationCreateNestedOneWithoutPastEventsInput
    users?: UserCreateNestedManyWithoutPastEventsInput
  }

  export type PastEventUncheckedCreateWithoutCategoriesInput = {
    id?: number
    title: string
    locationId: number
    date: Date | string
    description?: string | null
    users?: UserUncheckedCreateNestedManyWithoutPastEventsInput
  }

  export type PastEventCreateOrConnectWithoutCategoriesInput = {
    where: PastEventWhereUniqueInput
    create: XOR<PastEventCreateWithoutCategoriesInput, PastEventUncheckedCreateWithoutCategoriesInput>
  }

  export type QuestionUpsertWithWhereUniqueWithoutCategoryInput = {
    where: QuestionWhereUniqueInput
    update: XOR<QuestionUpdateWithoutCategoryInput, QuestionUncheckedUpdateWithoutCategoryInput>
    create: XOR<QuestionCreateWithoutCategoryInput, QuestionUncheckedCreateWithoutCategoryInput>
  }

  export type QuestionUpdateWithWhereUniqueWithoutCategoryInput = {
    where: QuestionWhereUniqueInput
    data: XOR<QuestionUpdateWithoutCategoryInput, QuestionUncheckedUpdateWithoutCategoryInput>
  }

  export type QuestionUpdateManyWithWhereWithoutCategoryInput = {
    where: QuestionScalarWhereInput
    data: XOR<QuestionUpdateManyMutationInput, QuestionUncheckedUpdateManyWithoutCategoryInput>
  }

  export type FutureEventUpsertWithWhereUniqueWithoutCategoriesInput = {
    where: FutureEventWhereUniqueInput
    update: XOR<FutureEventUpdateWithoutCategoriesInput, FutureEventUncheckedUpdateWithoutCategoriesInput>
    create: XOR<FutureEventCreateWithoutCategoriesInput, FutureEventUncheckedCreateWithoutCategoriesInput>
  }

  export type FutureEventUpdateWithWhereUniqueWithoutCategoriesInput = {
    where: FutureEventWhereUniqueInput
    data: XOR<FutureEventUpdateWithoutCategoriesInput, FutureEventUncheckedUpdateWithoutCategoriesInput>
  }

  export type FutureEventUpdateManyWithWhereWithoutCategoriesInput = {
    where: FutureEventScalarWhereInput
    data: XOR<FutureEventUpdateManyMutationInput, FutureEventUncheckedUpdateManyWithoutCategoriesInput>
  }

  export type PastEventUpsertWithWhereUniqueWithoutCategoriesInput = {
    where: PastEventWhereUniqueInput
    update: XOR<PastEventUpdateWithoutCategoriesInput, PastEventUncheckedUpdateWithoutCategoriesInput>
    create: XOR<PastEventCreateWithoutCategoriesInput, PastEventUncheckedCreateWithoutCategoriesInput>
  }

  export type PastEventUpdateWithWhereUniqueWithoutCategoriesInput = {
    where: PastEventWhereUniqueInput
    data: XOR<PastEventUpdateWithoutCategoriesInput, PastEventUncheckedUpdateWithoutCategoriesInput>
  }

  export type PastEventUpdateManyWithWhereWithoutCategoriesInput = {
    where: PastEventScalarWhereInput
    data: XOR<PastEventUpdateManyMutationInput, PastEventUncheckedUpdateManyWithoutCategoriesInput>
  }

  export type FutureEventUpdateWithoutUsersInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    published?: BoolFieldUpdateOperationsInput | boolean
    location?: LocationUpdateOneRequiredWithoutFutureEventsNestedInput
    categories?: CategoryUpdateManyWithoutFutureEventsNestedInput
    questions?: QuestionUpdateManyWithoutFutureEventsNestedInput
  }

  export type FutureEventUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    published?: BoolFieldUpdateOperationsInput | boolean
    locationId?: IntFieldUpdateOperationsInput | number
    categories?: CategoryUncheckedUpdateManyWithoutFutureEventsNestedInput
    questions?: QuestionUncheckedUpdateManyWithoutFutureEventsNestedInput
  }

  export type FutureEventUncheckedUpdateManyWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    published?: BoolFieldUpdateOperationsInput | boolean
    locationId?: IntFieldUpdateOperationsInput | number
  }

  export type PastEventUpdateWithoutUsersInput = {
    title?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: LocationUpdateOneRequiredWithoutPastEventsNestedInput
    categories?: CategoryUpdateManyWithoutPastEventsNestedInput
  }

  export type PastEventUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    locationId?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    categories?: CategoryUncheckedUpdateManyWithoutPastEventsNestedInput
  }

  export type PastEventUncheckedUpdateManyWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    locationId?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CategoryUpdateWithoutFutureEventsInput = {
    name?: StringFieldUpdateOperationsInput | string
    icon?: StringFieldUpdateOperationsInput | string
    question?: QuestionUpdateManyWithoutCategoryNestedInput
    pastEvents?: PastEventUpdateManyWithoutCategoriesNestedInput
  }

  export type CategoryUncheckedUpdateWithoutFutureEventsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    icon?: StringFieldUpdateOperationsInput | string
    question?: QuestionUncheckedUpdateManyWithoutCategoryNestedInput
    pastEvents?: PastEventUncheckedUpdateManyWithoutCategoriesNestedInput
  }

  export type CategoryUncheckedUpdateManyWithoutFutureEventsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    icon?: StringFieldUpdateOperationsInput | string
  }

  export type UserUpdateWithoutFutureEventsInput = {
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    username?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    pastEvents?: PastEventUpdateManyWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutFutureEventsInput = {
    id?: IntFieldUpdateOperationsInput | number
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    username?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    pastEvents?: PastEventUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateManyWithoutFutureEventsInput = {
    id?: IntFieldUpdateOperationsInput | number
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    username?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type QuestionUpdateWithoutFutureEventsInput = {
    question?: StringFieldUpdateOperationsInput | string
    answers?: QuestionUpdateanswersInput | string[]
    rightAnswer?: StringFieldUpdateOperationsInput | string
    category?: CategoryUpdateOneRequiredWithoutQuestionNestedInput
  }

  export type QuestionUncheckedUpdateWithoutFutureEventsInput = {
    id?: IntFieldUpdateOperationsInput | number
    question?: StringFieldUpdateOperationsInput | string
    answers?: QuestionUpdateanswersInput | string[]
    rightAnswer?: StringFieldUpdateOperationsInput | string
    categoryId?: IntFieldUpdateOperationsInput | number
  }

  export type QuestionUncheckedUpdateManyWithoutFutureEventsInput = {
    id?: IntFieldUpdateOperationsInput | number
    question?: StringFieldUpdateOperationsInput | string
    answers?: QuestionUpdateanswersInput | string[]
    rightAnswer?: StringFieldUpdateOperationsInput | string
    categoryId?: IntFieldUpdateOperationsInput | number
  }

  export type PastEventCreateManyLocationInput = {
    id?: number
    title: string
    date: Date | string
    description?: string | null
  }

  export type FutureEventCreateManyLocationInput = {
    id?: number
    createdAt?: Date | string
    title: string
    image: string
    date: Date | string
    published?: boolean
  }

  export type PastEventUpdateWithoutLocationInput = {
    title?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    categories?: CategoryUpdateManyWithoutPastEventsNestedInput
    users?: UserUpdateManyWithoutPastEventsNestedInput
  }

  export type PastEventUncheckedUpdateWithoutLocationInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    categories?: CategoryUncheckedUpdateManyWithoutPastEventsNestedInput
    users?: UserUncheckedUpdateManyWithoutPastEventsNestedInput
  }

  export type PastEventUncheckedUpdateManyWithoutLocationInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FutureEventUpdateWithoutLocationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    published?: BoolFieldUpdateOperationsInput | boolean
    categories?: CategoryUpdateManyWithoutFutureEventsNestedInput
    users?: UserUpdateManyWithoutFutureEventsNestedInput
    questions?: QuestionUpdateManyWithoutFutureEventsNestedInput
  }

  export type FutureEventUncheckedUpdateWithoutLocationInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    published?: BoolFieldUpdateOperationsInput | boolean
    categories?: CategoryUncheckedUpdateManyWithoutFutureEventsNestedInput
    users?: UserUncheckedUpdateManyWithoutFutureEventsNestedInput
    questions?: QuestionUncheckedUpdateManyWithoutFutureEventsNestedInput
  }

  export type FutureEventUncheckedUpdateManyWithoutLocationInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    published?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CategoryUpdateWithoutPastEventsInput = {
    name?: StringFieldUpdateOperationsInput | string
    icon?: StringFieldUpdateOperationsInput | string
    question?: QuestionUpdateManyWithoutCategoryNestedInput
    futureEvents?: FutureEventUpdateManyWithoutCategoriesNestedInput
  }

  export type CategoryUncheckedUpdateWithoutPastEventsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    icon?: StringFieldUpdateOperationsInput | string
    question?: QuestionUncheckedUpdateManyWithoutCategoryNestedInput
    futureEvents?: FutureEventUncheckedUpdateManyWithoutCategoriesNestedInput
  }

  export type CategoryUncheckedUpdateManyWithoutPastEventsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    icon?: StringFieldUpdateOperationsInput | string
  }

  export type UserUpdateWithoutPastEventsInput = {
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    username?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    futureEvents?: FutureEventUpdateManyWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutPastEventsInput = {
    id?: IntFieldUpdateOperationsInput | number
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    username?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    futureEvents?: FutureEventUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateManyWithoutPastEventsInput = {
    id?: IntFieldUpdateOperationsInput | number
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    username?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type FutureEventUpdateWithoutQuestionsInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    published?: BoolFieldUpdateOperationsInput | boolean
    location?: LocationUpdateOneRequiredWithoutFutureEventsNestedInput
    categories?: CategoryUpdateManyWithoutFutureEventsNestedInput
    users?: UserUpdateManyWithoutFutureEventsNestedInput
  }

  export type FutureEventUncheckedUpdateWithoutQuestionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    published?: BoolFieldUpdateOperationsInput | boolean
    locationId?: IntFieldUpdateOperationsInput | number
    categories?: CategoryUncheckedUpdateManyWithoutFutureEventsNestedInput
    users?: UserUncheckedUpdateManyWithoutFutureEventsNestedInput
  }

  export type FutureEventUncheckedUpdateManyWithoutQuestionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    published?: BoolFieldUpdateOperationsInput | boolean
    locationId?: IntFieldUpdateOperationsInput | number
  }

  export type QuestionCreateManyCategoryInput = {
    id?: number
    question: string
    answers?: QuestionCreateanswersInput | string[]
    rightAnswer: string
  }

  export type QuestionUpdateWithoutCategoryInput = {
    question?: StringFieldUpdateOperationsInput | string
    answers?: QuestionUpdateanswersInput | string[]
    rightAnswer?: StringFieldUpdateOperationsInput | string
    futureEvents?: FutureEventUpdateManyWithoutQuestionsNestedInput
  }

  export type QuestionUncheckedUpdateWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    question?: StringFieldUpdateOperationsInput | string
    answers?: QuestionUpdateanswersInput | string[]
    rightAnswer?: StringFieldUpdateOperationsInput | string
    futureEvents?: FutureEventUncheckedUpdateManyWithoutQuestionsNestedInput
  }

  export type QuestionUncheckedUpdateManyWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    question?: StringFieldUpdateOperationsInput | string
    answers?: QuestionUpdateanswersInput | string[]
    rightAnswer?: StringFieldUpdateOperationsInput | string
  }

  export type FutureEventUpdateWithoutCategoriesInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    published?: BoolFieldUpdateOperationsInput | boolean
    location?: LocationUpdateOneRequiredWithoutFutureEventsNestedInput
    users?: UserUpdateManyWithoutFutureEventsNestedInput
    questions?: QuestionUpdateManyWithoutFutureEventsNestedInput
  }

  export type FutureEventUncheckedUpdateWithoutCategoriesInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    published?: BoolFieldUpdateOperationsInput | boolean
    locationId?: IntFieldUpdateOperationsInput | number
    users?: UserUncheckedUpdateManyWithoutFutureEventsNestedInput
    questions?: QuestionUncheckedUpdateManyWithoutFutureEventsNestedInput
  }

  export type FutureEventUncheckedUpdateManyWithoutCategoriesInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    title?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    published?: BoolFieldUpdateOperationsInput | boolean
    locationId?: IntFieldUpdateOperationsInput | number
  }

  export type PastEventUpdateWithoutCategoriesInput = {
    title?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    location?: LocationUpdateOneRequiredWithoutPastEventsNestedInput
    users?: UserUpdateManyWithoutPastEventsNestedInput
  }

  export type PastEventUncheckedUpdateWithoutCategoriesInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    locationId?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserUncheckedUpdateManyWithoutPastEventsNestedInput
  }

  export type PastEventUncheckedUpdateManyWithoutCategoriesInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    locationId?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FutureEventCountOutputTypeDefaultArgs instead
     */
    export type FutureEventCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FutureEventCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LocationCountOutputTypeDefaultArgs instead
     */
    export type LocationCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LocationCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PastEventCountOutputTypeDefaultArgs instead
     */
    export type PastEventCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PastEventCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use QuestionCountOutputTypeDefaultArgs instead
     */
    export type QuestionCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = QuestionCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CategoryCountOutputTypeDefaultArgs instead
     */
    export type CategoryCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CategoryCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FutureEventDefaultArgs instead
     */
    export type FutureEventArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FutureEventDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LocationDefaultArgs instead
     */
    export type LocationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LocationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PastEventDefaultArgs instead
     */
    export type PastEventArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PastEventDefaultArgs<ExtArgs>
    /**
     * @deprecated Use QuestionDefaultArgs instead
     */
    export type QuestionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = QuestionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CategoryDefaultArgs instead
     */
    export type CategoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CategoryDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}